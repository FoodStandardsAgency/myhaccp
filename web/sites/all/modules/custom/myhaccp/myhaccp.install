<?php

/**
 * Implementation of hook_schema().
 */
function myhaccp_schema() {
  $schema = array();

  $schema['mforms_storage'] = array(
    'fields' => array(
      'iid' => array(
        'description' => 'The instance ID for this form.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that created this entry.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The date this entry was started.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'changed' => array(
        'description' => 'The last updated timestamp.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'notes' => array(
        'description' => 'A description or notes to differentiate the entries.',
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 255,
      ),
      'status' => array(
        'description' => 'The completed status of the study.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'instance_changed' => array('changed'),
      'instance_created' => array('created'),
      'uid' => array('uid'),
      'status' => array('status'),
    ),
    'primary key' => array('iid'),
  );

  $schema['mforms_storage_steps'] = array(
    'fields' => array(
      'sid' => array(
        'description' => 'The primary key for this step.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'iid' => array(
        'description' => 'The instance ID of the study.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'store_key' => array(
        'description' => 'The unique key for this aspect of the study.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'store_data' => array(
        'description' => 'The form_state data.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'indexes' => array(
      'sid' => array('sid'),
      'iid' => array('iid'),
    ),
    'primary key' => array('sid'),
    'foreign keys' => array(
      'mforms_storage' => array(
        'table' => 'mforms_storage',
        'columns' => array('iid' => 'iid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Update the menu item for the tool to point to the new url 'tool'.
 */
function myhaccp_update_7001() {
  db_update('menu_links')
    ->fields(array(
      'link_path' => 'tool',
      'router_path' => 'tool',
    ))
    ->condition('link_path', 'prototype')
    ->execute();
}

/**
 * Enable the dialog module.
 */
function myhaccp_update_7002() {
  module_enable('dialog');
}

/**
 * Add a status column to the database.
 */
function myhaccp_update_7003() {
  // The new status field's specifications.
  $spec = array(
    'description' => 'The completed status of the study.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'initial' => 0,
  );
  // Add an index.
  $indexes = array(
    'status' => array('status'),
  );
  // Add the field.
  db_add_field('mforms_storage', 'status', $spec, $indexes);
}

/**
 * Add an image style for the PDF embedded image.
 */
function myhaccp_update_7004() {
  $style = image_style_save(array('name' => 'pdf_flow_diagram'));
  $effect = array(
    'name' => 'image_scale',
    'data' => array(
      'width' => 2048,
      'height' => '',
      'upscale' => FALSE,
    ),
    'isid' => $style['isid'],
  );
  image_effect_save($effect);
}

/**
 * Change "Bakery products" in select list to "Confectionery products"
 */
function myhaccp_update_7005() {
  // Update the data table.
  db_update('field_data_field_business_type')
    ->fields(array(
      'field_business_type_value' => 'Confectionery products',
    ))
    ->condition('field_business_type_value', 'Bakery products')
    ->execute();
  // Update the revisions table.
  db_update('field_revision_field_business_type')
    ->fields(array(
      'field_business_type_value' => 'Confectionery products',
    ))
    ->condition('field_business_type_value', 'Bakery products')
    ->execute();
  // Alter the options.
  $query = db_select('field_config', 'fc')
    ->fields('fc', array(
      'data',
    ))
    ->condition('fc.field_name', 'field_business_type');
  $result = $query->execute()->fetchAll();
  $result = unserialize($result[0]->data);
  $keys = array_keys($result['settings']['allowed_values']);
  $keys[array_search('Bakery products', $keys)] = 'Confectionery products';
  $result['settings']['allowed_values'] = array_combine($keys, $result['settings']['allowed_values']);
  $result['settings']['allowed_values']['Confectionery products'] = 'Confectionery products';
  // Store the changed results.
  db_update('field_config')
    ->fields(array(
      'data' => serialize($result),
    ))
    ->condition('field_name', 'field_business_type')
    ->execute();
}

/**
 * Add a business name field to the profile.
 */
function myhaccp_update_7006() {
  $field = array(
    'field_name' => 'field_business_name',
    'type' => 'text',
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_business_name',
    'entity_type' => 'profile2',
    'label' => 'Business name',
    'bundle' => 'main',
    'required' => FALSE,
    'settings' => array(),
    'description' => t('Enter an optional business name. This is only used when printing your MyHACCP study on the cover sheet.'),
    'widget' => array(
      'type' => 'textfield',
      'weight' => 5,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'weight' => '5',
        'settings' => array(),
        'module' => 'text',
      ),
    ),
  );
  field_create_instance($instance);
}

/**
 * Add the clone permission for authenticated users.
 */
function myhaccp_update_7007() {
  // The authenticated role should have the 'own' permission.
  user_role_grant_permissions(2, array('clone own myhaccp study'));
  // The site manager should have the 'any' permission.
  user_role_grant_permissions(5, array('clone any myhaccp study'));
  // The administrator should have the 'any' permission.
  user_role_grant_permissions(3, array('clone any myhaccp study'));
}

/**
 * Update the field label of field_business_name
 * to read "Business name (optional)".
 */
function myhaccp_update_7008() {
  // Fetch an instance info array for field_business_name.
  $instance_info = field_info_instance('profile2', 'field_business_name', 'main');
  // Change label in the instance definition.
  $instance_info['label'] = 'Business name (optional)';
  // Update the description.
  $instance_info['description'] = "Enter a business name. This only appears on the cover sheet of your downloaded MyHACCP study.";
  // Write the changed definition back.
  field_update_instance($instance_info);
}

/**
 * Create a landscape image style for PDF output images.
 */
function myhaccp_update_7009() {
  $style = image_style_save(array('name' => 'pdf_flow_diagram_landscape'));
  $effect = array(
    'name' => 'image_scale',
    'data' => array(
      'width' => 0,
      'height' => 2048,
      'upscale' => FALSE,
    ),
    'isid' => $style['isid'],
  );
  image_effect_save($effect);
}

/**
 * Enable the bean module.
 */
function myhaccp_update_7010() {
  module_load_include('inc', 'bean', 'includes/bean.core');
  module_enable(array('bean'));
  cache_clear_all();
}

/**
 * Enable the bean feature and language features.
 */
function myhaccp_update_7011() {
  module_enable(array('myhaccp_language_permissions', 'myhaccp_pdf_download'));
  features_revert_module('myhaccp_language_permissions');
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  module_enable(array(
    'myhaccp_language_configuration',
    'myhaccp_user_profiles'
  ));
  features_revert_module('myhaccp_language_configuration');
  features_revert_module('myhaccp_admin_views');
  features_revert_module('myhaccp_language_configuration');
  features_revert_module('myhaccp_user_profiles');
  module_enable(array(
    'myhaccp_bean_type_content'
  ));
  cache_clear_all();
  features_revert_module('myhaccp_bean_type_content');
}

/**
 * Delete the home page node and content type.
 */
function myhaccp_update_7012() {
  node_delete(9);
  node_type_delete('homepage');
  // Delete all the homepage variables.
  variable_del('node_preview_homepage');
  variable_del('additional_settings__active_tab_homepage');
  variable_del('honeypot_form_homepage_node_form');
  variable_del('menu_options_homepage');
  variable_del('menu_parent_homepage');
  variable_del('node_options_homepage');
  variable_del('node_submitted_homepage');
  variable_del('menu_options_homepage');
  variable_del('rh_module_homepage');
  variable_del('rh_node_override_homepage');
  variable_del('save_continue_homepage');
  variable_del('simplify_nodes_homepage');
  node_types_rebuild();
  menu_rebuild();
}

/**
 * Enable the home page feature.
 */
function myhaccp_update_7013() {
  module_enable(array('myhaccp_home_page'));
}

/**
 * Delete the article content type.
 */
function myhaccp_update_7014() {
  node_type_delete('article');
  // Delete all the article variables.
  variable_del('node_preview_article');
  variable_del('additional_settings__active_tab_article');
  variable_del('honeypot_form_article_node_form');
  variable_del('menu_options_article');
  variable_del('menu_parent_article');
  variable_del('node_options_article');
  variable_del('node_submitted_article');
  variable_del('menu_options_article');
  variable_del('rh_module_article');
  variable_del('rh_node_override_article');
  variable_del('save_continue_article');
  variable_del('simplify_nodes_article');
  node_types_rebuild();
  menu_rebuild();
}

/**
 * Enable the resources page feature.
 */
function myhaccp_update_7015() {
  module_enable(array('myhaccp_resources_page'));
  features_revert_module('myhaccp_resources_page');
}

/**
 * Delete the content block content type.
 */
function myhaccp_update_7016() {
  node_delete(90);
  node_delete(88);
  node_type_delete('content_block');
  // Delete all the content_block variables.
  variable_del('node_preview_content_block');
  variable_del('additional_settings__active_tab_content_block');
  variable_del('honeypot_form_content_block_node_form');
  variable_del('menu_options_content_block');
  variable_del('menu_parent_content_block');
  variable_del('node_options_content_block');
  variable_del('node_submitted_content_block');
  variable_del('menu_options_content_block');
  variable_del('rh_module_content_block');
  variable_del('rh_node_override_content_block');
  variable_del('save_continue_content_block');
  variable_del('simplify_nodes_content_block');
  node_types_rebuild();
  menu_rebuild();
}

/**
 * Delete the resources page content type.
 */
function myhaccp_update_7017() {
  node_type_delete('resources_page');
  // Delete all the resources_page variables.
  variable_del('node_preview_resources_page');
  variable_del('additional_settings__active_tab_resources_page');
  variable_del('honeypot_form_resources_page_node_form');
  variable_del('menu_options_resources_page');
  variable_del('menu_parent_resources_page');
  variable_del('node_options_resources_page');
  variable_del('node_submitted_resources_page');
  variable_del('menu_options_resources_page');
  variable_del('rh_module_resources_page');
  variable_del('rh_node_override_resources_page');
  variable_del('save_continue_resources_page');
  variable_del('simplify_nodes_resources_page');
  node_types_rebuild();
  menu_rebuild();
}

/**
 * Enable the content type features.
 */
function myhaccp_update_7018() {
  module_load_include('inc', 'l10n_update', 'l10n_update.batch');
  title_field_replacement_batch_set('node', 'page', 'title');
  title_field_replacement_batch_set('node', 'guidance', 'title');
  title_field_replacement_batch_set('node', 'webform', 'title');
  title_field_replacement_batch_set('node', 'resource_download', 'title');
  title_field_replacement_batch_set('node', 'resource_link', 'title');
  module_enable(array(
    'myhaccp_content_type_guidance',
    'myhaccp_content_type_resource_download',
    'myhaccp_content_type_resource_link',
    'myhaccp_content_type_basic_page'
  ));
}

/**
 * Revert the content type features.
 */
function myhaccp_update_7019() {
  features_revert_module('myhaccp_content_type_guidance');
  features_revert_module('myhaccp_content_type_resource_download');
  features_revert_module('myhaccp_content_type_resource_link');
  features_revert_module('myhaccp_content_type_basic_page');
}

/**
 * Converts the footer block into a bean.
 */
function myhaccp_update_7020() {
  $bean = bean_create(array('type' => 'content'));
  $bean->label = 'Footer: GOV.UK info';
  $bean->title = '';
  $bean->delta = 'footer_gov';
  $bean->field_description = array(
    'en' => array(
      0 => array(
        'value' => '<p class="copyright-message"><a href="https://www.gov.uk"><img alt="GOV.UK logo" class="gov-uk-logo" src="/sites/all/themes/custom/myhaccp/images/gov-uk.jpg"></a>&copy; Crown Copyright</p>',
        'format' => 'full_html',
      ),
    ),
  );
  $bean->save();
}

/**
 * Removes all blocks in favour of context module.
 */
function myhaccp_update_7021() {
  // Disable all blocks.
  db_update('block')
    ->fields(array('status' => 0))
    ->condition('theme', 'myhaccp')
    ->execute();
}

/**
 * Enable the Context feature to position all blocks again.
 */
function myhaccp_update_7022() {
  module_enable(array('myhaccp_context'));
  features_revert_module('myhaccp_context');
}

/**
 * Enable the notices module to place an alert notice on the tool page.
 */
function myhaccp_update_7023() {
  module_enable(array('myhaccp_notices'));
  features_revert_module('myhaccp_context');
}

/**
 * Add the css to the bean alert notice block.
 */
function myhaccp_update_7025() {
  module_enable(array('block_class'));
  $class = 'alert--myhaccp';
  db_update('block')
    ->fields(array('css_class' => $class))
    ->condition('module', 'myhaccp_notices')
    ->condition('delta', 'notice')
    ->execute();
}

/**
 * Convert preparatory and principle intro and review blocks into beans.
 */
function myhaccp_update_7026() {
  // Prepare a list of the blocks we want to convert.
  $blocks = array(
    2 => array(
      'delta' => 'preparatory_review_intro',
      'label' => 'Preparatory stages review intro',
    ),
    3 => array(
      'delta' => 'preparatory_review_main',
      'label' => 'Preparatory stages review main',
    ),
    4 => array(
      'delta' => 'principle_review_intro',
      'label' => 'Principle stages review intro',
    ),
    5 => array(
      'delta' => 'principle_review_main',
      'label' => 'Principle stages review main',
    ),
  );
  // Iterate over the blocks.
  foreach ($blocks as $bid => $block_info) {
    $block = block_custom_block_get($bid);
    $content = $block['body'];
    // Create the bean.
    $bean = bean_create(array('type' => 'content'));
    $bean->label = $block_info['label'];
    $bean->title = '';
    $bean->delta = $block_info['delta'];
    $bean->field_description = array(
      'en' => array(
        0 => array(
          'value' => $content,
          'format' => 'full_html',
        ),
      ),
    );
    $bean->save();
  }
}

/**
 * Deletes unused blocks.
 */
function myhaccp_update_7027() {
  $deltas = array(1, 2, 3, 4, 5, 6);
  foreach ($deltas as $delta) {
    db_delete('block_custom')
      ->condition('bid', $delta)
      ->execute();
    db_delete('block')
      ->condition('module', 'block')
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', 'block')
      ->condition('delta', $delta)
      ->execute();
  }
}

/**
 * Update all the menu links in the main menu so they are translatable.
 */
function myhaccp_update_7028() {
  $items = db_select('menu_links')
    ->fields('menu_links', array('mlid', 'link_title'))
    ->condition('menu_links.menu_name', 'main-menu')
    ->execute()->fetchAllKeyed();
  foreach ($items as $mlid => $item) {
    $item = menu_link_load($mlid);
    $options = $item['options'];
    $options['alter'] = TRUE;
    db_update('menu_links')
      ->fields(array('options' => serialize($options), 'customized' => 1))
      ->condition('mlid', $mlid)
      ->execute();
  }
}

/**
 * Update all the menu links in the footer menus so they are translatable.
 */
function myhaccp_update_7029() {
  $items = db_select('menu_links')
    ->fields('menu_links', array('mlid', 'link_title'))
    ->condition('menu_links.menu_name', 'menu-footer-links%', 'LIKE')
    ->execute()->fetchAllKeyed();
  foreach ($items as $mlid => $item) {
    $item = menu_link_load($mlid);
    $options = $item['options'];
    $options['alter'] = TRUE;
    db_update('menu_links')
      ->fields(array('options' => serialize($options), 'customized' => 1))
      ->condition('mlid', $mlid)
      ->execute();
  }
}

/**
 * Inserts the Welsh language as features doesn't seem to want to do it.
 */
function myhaccp_update_7030() {
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  features_revert_module('myhaccp_language_permissions');
  locale_add_language('cy',
    'Welsh',
    'Cymraeg',
    LANGUAGE_LTR,
    '',
    'cy',
    TRUE,
    FALSE);
  // Additional params, locale_add_language does not implement.
  db_update('languages')
    ->fields(array(
      'plurals' => 4,
      'formula' => '(($n==1)?(0):(($n==2)?(1):((($n!=8)&&($n!=11))?(2):3)))',
      'weight' => 0,
    ))
    ->condition('language', 'cy')
    ->execute();
  variable_set('entity_translation_hide_translation_links_guidance', 0);
  variable_set('entity_translation_node_metadata_guidance', "0");
  variable_set('entity_translation_revision_enabled', TRUE);
  variable_set('language_default', (object) array(
    'language' => 'en',
    'name' => 'English',
    'native' => 'English',
    'direction' => 0,
    'enabled' => 1,
    'plurals' => 0,
    'formula' => '',
    'domain' => '',
    'prefix' => '',
    'weight' => 0,
    'javascript' => '',
  ));
  variable_set('language_negotiation_language', array(
    'locale-url' =>
      array(
        'callbacks' =>
          array(
            'language' => 'locale_language_from_url',
            'switcher' => 'locale_language_switcher_url',
            'url_rewrite' => 'locale_language_url_rewrite_url',
          ),
        'file' => 'includes/locale.inc',
      ),
    'locale-user' =>
      array(
        'callbacks' =>
          array(
            'language' => 'locale_language_from_user',
          ),
        'file' => 'includes/locale.inc',
      ),
    'language-default' =>
      array(
        'callbacks' =>
          array(
            'language' => 'language_from_default',
          ),
      ),
  ));
  variable_set('language_negotiation_language_content', array(
    'locale-url' =>
      array(
        'callbacks' =>
          array(
            'language' => 'locale_language_from_url',
            'switcher' => 'locale_language_switcher_url',
            'url_rewrite' => 'locale_language_url_rewrite_url',
          ),
        'file' => 'includes/locale.inc',
      ),
    'locale-user' =>
      array(
        'callbacks' =>
          array(
            'language' => 'locale_language_from_user',
          ),
        'file' => 'includes/locale.inc',
      ),
    'locale-interface' =>
      array(
        'callbacks' =>
          array(
            'language' => 'locale_language_from_interface',
          ),
        'file' => 'includes/locale.inc',
      ),
    'language-default' =>
      array(
        'callbacks' =>
          array(
            'language' => 'language_from_default',
          ),
      ),
  ));
  variable_set('language_negotiation_language_url', array(
    'locale-url' =>
      array(
        'callbacks' =>
          array(
            'language' => 'locale_language_from_url',
            'switcher' => 'locale_language_switcher_url',
            'url_rewrite' => 'locale_language_url_rewrite_url',
          ),
        'file' => 'includes/locale.inc',
      ),
    'locale-url-fallback' =>
      array(
        'callbacks' =>
          array(
            'language' => 'locale_language_url_fallback',
          ),
        'file' => 'includes/locale.inc',
      ),
  ));
}

/**
 * Import the Welsh language PO files into the system.
 */
function myhaccp_update_7031() {
  // Refresh all the strings in the menu.
  module_load_include('inc', 'i18n_string', 'i18n_string.admin');
  i18n_string_refresh_group('menu');

  // Import the menu translations.
  $path = DRUPAL_ROOT . '/sites/all/translations/';
  $file = new stdClass();
  $file->filename = 'menu.cy.po';
  $file->uri = $path . $file->filename;
  _locale_import_po($file, 'cy', LOCALE_IMPORT_OVERWRITE, 'menu');

  // Import the interface translations.
  $path = DRUPAL_ROOT . '/sites/all/translations/';
  $file = new stdClass();
  $file->filename = 'interface.cy.po';
  $file->uri = $path . $file->filename;
  _locale_import_po($file, 'cy', LOCALE_IMPORT_OVERWRITE, 'default');
}
