<?php

/**
 * Implementation of hook_schema().
 */
function myhaccp_schema() {
  $schema = array();

  $schema['mforms_storage'] = array(
    'fields' => array(
      'iid' => array(
        'description' => 'The instance ID for this form.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that created this entry.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The date this entry was started.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'changed' => array(
        'description' => 'The last updated timestamp.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'notes' => array(
        'description' => 'A description or notes to differentiate the entries.',
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 255,
      ),
      'status' => array(
        'description' => 'The completed status of the study.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'instance_changed' => array('changed'),
      'instance_created' => array('created'),
      'uid' => array('uid'),
      'status' => array('status'),
    ),
    'primary key' => array('iid'),
  );

  $schema['mforms_storage_steps'] = array(
    'fields' => array(
      'sid' => array(
        'description' => 'The primary key for this step.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'iid' => array(
        'description' => 'The instance ID of the study.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'store_key' => array(
        'description' => 'The unique key for this aspect of the study.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'store_data' => array(
        'description' => 'The form_state data.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'indexes' => array(
      'sid' => array('sid'),
      'iid' => array('iid'),
    ),
    'primary key' => array('sid'),
    'foreign keys' => array(
      'mforms_storage' => array(
        'table' => 'mforms_storage',
        'columns' => array('iid' => 'iid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Update the menu item for the tool to point to the new url 'tool'.
 */
function myhaccp_update_7001() {
  db_update('menu_links')
    ->fields(array(
      'link_path' => 'tool',
      'router_path' => 'tool',
    ))
    ->condition('link_path', 'prototype')
    ->execute();
}

/**
 * Enable the dialog module.
 */
function myhaccp_update_7002() {
  module_enable('dialog');
}

/**
 * Add a status column to the database.
 */
function myhaccp_update_7003() {
  // The new status field's specifications.
  $spec = array(
    'description' => 'The completed status of the study.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'initial' => 0,
  );
  // Add an index.
  $indexes = array(
    'status' => array('status'),
  );
  // Add the field.
  db_add_field('mforms_storage', 'status', $spec, $indexes);
}

/**
 * Add an image style for the PDF embedded image.
 */
function myhaccp_update_7004() {
  $style = image_style_save(array('name' => 'pdf_flow_diagram'));
  $effect = array(
    'name' => 'image_scale',
    'data' => array(
      'width' => 2048,
      'height' => '',
      'upscale' => FALSE,
    ),
    'isid' => $style['isid'],
  );
  image_effect_save($effect);
}

/**
 * Change "Bakery products" in select list to "Confectionery products"
 */
function myhaccp_update_7005() {
  // Update the data table.
  db_update('field_data_field_business_type')
    ->fields(array(
      'field_business_type_value' => 'Confectionery products',
    ))
    ->condition('field_business_type_value', 'Bakery products')
    ->execute();
  // Update the revisions table.
  db_update('field_revision_field_business_type')
    ->fields(array(
      'field_business_type_value' => 'Confectionery products',
    ))
    ->condition('field_business_type_value', 'Bakery products')
    ->execute();
  // Alter the options.
  $query = db_select('field_config', 'fc')
    ->fields('fc', array(
      'data',
    ))
    ->condition('fc.field_name', 'field_business_type');
  $result = $query->execute()->fetchAll();
  $result = unserialize($result[0]->data);
  $keys = array_keys($result['settings']['allowed_values']);
  $keys[array_search('Bakery products', $keys)] = 'Confectionery products';
  $result['settings']['allowed_values'] = array_combine($keys, $result['settings']['allowed_values']);
  $result['settings']['allowed_values']['Confectionery products'] = 'Confectionery products';
  // Store the changed results.
  db_update('field_config')
    ->fields(array(
      'data' => serialize($result),
    ))
    ->condition('field_name', 'field_business_type')
    ->execute();
}

/**
 * Add a business name field to the profile.
 */
function myhaccp_update_7006() {
  $field = array(
    'field_name' => 'field_business_name',
    'type' => 'text',
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_business_name',
    'entity_type' => 'profile2',
    'label' => 'Business name',
    'bundle' => 'main',
    'required' => FALSE,
    'settings' => array(),
    'description' => t('Enter an optional business name. This is only used when printing your MyHACCP study on the cover sheet.'),
    'widget' => array(
      'type' => 'textfield',
      'weight' => 5,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'weight' => '5',
        'settings' => array(),
        'module' => 'text',
      ),
    ),
  );
  field_create_instance($instance);
}