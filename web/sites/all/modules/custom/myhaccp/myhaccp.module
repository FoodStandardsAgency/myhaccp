<?php

/**
 * Implements hook_init().
 */
function myhaccp_init() {
  // Declare all of the step forms.
  $files = _get_all_steps();
  foreach ($files as $file => $dir) {
    ctools_include($file, 'myhaccp', 'mforms/' . $dir);
  }
}

/**
 * Implements hook_menu().
 */
function myhaccp_menu() {
  $items['prototype'] = array(
    'title' => 'My forms',
    'page callback' => 'myhaccp_list',
    'page arguments' => array(),
    'access callback' => 'myhaccp_access',
    'access arguments' => array(1),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['prototype/form'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myhaccp_start_form'),
    'access callback' => 'myhaccp_access',
    'access arguments' => array(1),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['prototype/form/create'] = array(
    'page callback' => 'myhaccp_create',
    'access callback' => 'myhaccp_access',
    'access arguments' => array('create'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Define our permissions for managing the forms.
 */
function myhaccp_permission() {
  return array(
    'create myhaccp forms' => array(
      'title' => t('Create myhaccp forms'),
      'description' => t('Allow this role to create new myhaccp forms.'),
    ),
    'edit own myhaccp forms' => array(
      'title' => t('Edit own myhaccp forms'),
      'description' => t('Edit a user\'s own myhaccp forms.'),
    ),
    'edit any myhaccp forms' => array(
      'title' => t('Edit any myhaccp forms'),
      'description' => t('Edit any user\'s myhaccp forms.'),
    ),
  );
}

/**
 * Menu access callback.
 *
 * @param string $op
 *   Operation to check against.
 *
 * @return bool
 *   Boolean determining access.
 */
function myhaccp_access($op) {
  if ($op == 'create') {
    return user_access('create myhaccp forms');
  }
  else {
    return user_access('edit any myhaccp forms') && user_access('edit own myhaccp forms');
  }
}

/**
 * Implements hook_STORE_KEY_mforms_init().
 */
function myhaccp_myhaccp_mforms_init() {
  $store = MformsDatabaseStore::getInstance('myhaccp');
  $steps = MformsSteps::getInstance($store);

  // If using mustistep controls you need to explicitly define form steps and
  // its attributes.
  $controls = MyHACCPMultiStepControls::getInstance($store, $steps, array(
    'preparatory_a' => array(
      'stage' => 'preparatory',
      'value' => 'A',
      'weight' => 1,
    ),
    'preparatory_b' => array(
      'stage' => 'preparatory',
      'value' => 'B',
      'weight' => 2,
    ),
    'preparatory_c_question_1_3' => array(
      'stage' => 'preparatory',
      'value' => 'C.1',
      'weight' => 3,
    ),
    'preparatory_c_question_4' => array(
      'stage' => 'preparatory',
      'value' => 'C.2',
      'weight' => 4,
    ),
    'preparatory_d' => array(
      'stage' => 'preparatory',
      'value' => 'D',
      'weight' => 5,
    ),
    'principle_1_question_1' => array(
      'stage' => 'principles',
      'value' => '1.1',
      'weight' => 11,
    ),
    'principle_1_question_2' => array(
      'stage' => 'principles',
      'value' => '1.2',
      'weight' => 12,
    ),
  ));

  // Add the parsley.js library.
  $path = libraries_get_path('parsleyjs');
  drupal_add_js($path . '/parsley.js');
  drupal_add_js(drupal_get_path('module', 'myhaccp') . '/mforms/js/parsley_custom.js');

  // Init the mforms.
  mforms_init_module('myhaccp', 'myhaccp', $store, $controls);
}

/**
 * Menu callback which displays the form.
 */
function myhaccp_start_form($form, &$form_state, $iid = FALSE) {
  // If we've been passed an IID then set the session to that.
  if ($iid && is_numeric($iid)) {
    // Check that this user has permission to look at this form.
    global $user;
    $select = db_select('mforms_storage', 's')
      ->fields('s', array('uid'))
      ->condition('s.iid', $iid);
    $uid = $select->execute()->fetchField();
    if (user_access('edit any myhaccp form') || $user->uid == $uid) {
      $_SESSION['iid'] = $iid;
    }
    else {
      drupal_set_message('You do not have permission to edit this user\'s form', 'error');
      drupal_access_denied();
    }
  }
  else {
    // If there is no current session open then create a new db row.
    drupal_set_message('Please edit an existing form or create a new one.');
    drupal_goto('prototype');
  }
  return mforms_build('myhaccp', 'preparatory_a', $form_state);
}

/**
 * Implements hook_theme().
 */
function myhaccp_theme() {
  $path = drupal_get_path('module', 'myhaccp') . '/theme';
  return array(
    'myhacpp_p1q2_table' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhacpp_p1q2_table',
    )
  );
}

/**
 * Returns html to display a help tip icon.
 *
 * Currently just a simple bit of html, but this function may expand to
 * to take parameters.
 */
function _help_tip() {
  return '<a href="#" class="help-tip" title="This link will afford popup help text when clicked." target="_blank">?</a>';
}

/**
 * Defines all the function names of the stages.
 *
 * @return array
 *   an array keyed by the function name with the value being the preparatory or
 *   principle stage.
 */
function _get_all_steps() {
  $files = array(
    'preparatory_a' => 'preparatory',
    'preparatory_b' => 'preparatory',
    'preparatory_c_question_1_3' => 'preparatory',
    'preparatory_c_question_4' => 'preparatory',
    'preparatory_d' => 'preparatory',
    'principle_1_question_1' => 'principle',
    'principle_1_question_2' => 'principle',
  );
  return $files;
}

/**
 * Gets all the stage functions
 * @return array
 */
function _get_all_step_names() {
  return array_keys(_get_all_steps());
}

/**
 * Implements hook_element_info_alter().
 */
function myhaccp_element_info_alter(&$types) {
  foreach ($types as $type => $values) {
    $types[$type]['#process'][] = 'myhaccp_process';
  }
  return;
}

/**
 * Callback: Process form elements to add errors.
 *
 * Checks the form state's storage array element for a validate entry and then
 * tries to match it's key to the current form element's #name attribute. If
 * there is a match then it adds the error class to the form element and also
 * prints a message if the form has been executed. This ensures the message
 * only appears on the current stage.
 *
 * @see myhaccp_element_info_alter()
 */
function myhaccp_process($element, &$form_state) {
  $global_done = &drupal_static(__FUNCTION__);
  if (isset($form_state['values']['validate'])) {
    // First check for the special 'global' array element and make sure it
    // hasn't already been completed.
    if (isset($form_state['values']['validate']['global']) && !isset($global_done)) {
      // This means we need to show a message but not highlight any specific
      // form fields. It is possible that there are multiple global message,
      // in which case iterate and display them.
      if (is_array($form_state['values']['validate']['global'])) {
        foreach ($form_state['values']['validate']['global'] as $message) {
          drupal_set_message($message, 'error', FALSE);
        }
      }
      else {
        $message = $form_state['values']['validate']['global'];
        drupal_set_message($message, 'error', FALSE);
      }
      $global_done = TRUE;
    }
    // Add the error class to each of the elements.
    foreach ($form_state['values']['validate'] as $name => $message) {
      if (isset($element['#name']) && $element['#name'] == $name) {
        $element['#attributes']['class']['error'] = 'error';
        if (!empty($message) && $form_state['executed'] == TRUE) {
          // Add the message inline.
          $element['#validation_message'] = $message;
        }
      }
    }
  }
  return $element;
}

/**
 * Helper to prepare the form_state and $_POST ready to save into the db.
 *
 * Used to prepare validation messages.
 *
 * @param string $name
 *   The form #name parameter to target.
 * @param string $message
 *   The message to display.
 * @param array $form_state
 *   The current form_state array.
 */
function myhacpp_prepare_validation($name, $message, &$form_state) {
  // Allow the message to be translated.
  $message = t($message);
  // Add it to the form_state.
  $form_state['values']['validate'][$name] = $message;
  // Add it to the $_POST to make sure in gets saved in the db.
  $_POST['validate'][$name] = $message;
}

/**
 * Helper to clear validation errors on successful pass.
 *
 * @param array $form_state
 *   The form state array.
 */
function myhaccp_clear_validation(&$form_state) {
  if (isset($form_state['values']['validate'])) {
    unset($form_state['values']['validate']);
  }
  if (isset($_POST['validate'])) {
    unset($_POST['validate']);
  }
}

/**
 * Helper to check whether any options have been chosen in checkboxes fields.
 *
 * @param array $values
 *   The values of form_state to check.
 * @param array $element
 *   The $form element to check.
 *
 * @return bool
 *   TRUE if options are not set.
 */
function _checkboxes_field_is_empty($values, $element) {
  $options = array_get($values, $element, array());
  foreach ($options as $option) {
    if ($option !== 0) {
      $option_check = TRUE;
    }
  }
  if (!isset($option_check)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Checks whether the given element is empty of value.
 *
 * @param array $values
 *   The values of form_state to check.
 * @param array $element
 *   The $form element to check.
 *
 * @return bool
 *   TRUE if the field is empty.
 */
function _text_field_is_empty($values, $element) {
  $value = array_get($values, $element, FALSE);
  if ($value) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Get an item from an array using "dot" notation.
 *
 * @param array $array
 *   The array to check.
 * @param string $key
 *   The name of the key. Uses dot notation to delimit the keys.
 * @param mixed $default
 *   The default value to return if not found.
 *
 * @return mixed
 *   The value if found or the default if not. If no default then returns the
 *   array.
 */
function array_get($array, $key, $default = NULL) {
  if (is_null($key)) {
    return $array;
  }

  if (isset($array[$key])) {
    return $array[$key];
  }

  foreach (explode('.', $key) as $segment) {
    if (!is_array($array) || !array_key_exists($segment, $array)) {
      return value($default);
    }

    $array = $array[$segment];
  }

  return $array;
}

/**
 * Return the default value of the given value.
 *
 * @param mixed $value
 *   The default to return.
 *
 * @return mixed
 *   The return value.
 */
function value($value) {
  return $value instanceof Closure ? $value() : $value;
}

/**
 * Returns the prepared data from the database or form_state.
 *
 * Also updates the validation values in the form_state from the database.
 *
 * @param array $data
 *   The data as returned by mforms_get_vals().
 * @param array $form_state
 *   The current form_state array. Passed by reference so that the validate
 *   values can be added.
 *
 * @return array
 *   The saved or current values of the fields.
 */
function myhaccp_prepare_values($data, &$form_state) {
  $values = array();
  if (!empty($data)) {
    $values = $data;
    if (isset($data['validate'])) {
      $form_state['values']['validate'] = $data['validate'];
    }
  }
  elseif (isset($form_state['values'])) {
    $values = $form_state['values'];
  }
  return $values;
}
