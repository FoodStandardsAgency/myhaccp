<?php

/**
 * Implements hook_init().
 */
function myhaccp_init() {
  // Add some protection to ensure the class is loaded.
  if (class_exists('Pimple')) {
    myhaccp_di_container();
    global $container;
    $files = $container['configuration']->getFiles();
    // Declare all of the stages (steps) forms.
    foreach ($files as $name => $phase) {
      ctools_include($name, 'myhaccp', "mforms/$phase/$name");
    }
  }
  // Get the current study object.
  $study = $container['study'];
  // Try to set the IID based on the path. This is needed to avoid situations
  // where the initialisation of the study and stages happens before the SESSION
  // IID is set. The IID may get set later too.
  if ($iid = $study->getIIDFromURL()) {
    $study->setIID($iid);
  }
  // Initialise the study.
  myhaccp_initialise_study($study);
  ctools_include('myhaccp.form', 'myhaccp', 'includes');
}

/**
 * The dependency injection container.
 *
 * @return Pimple
 */
function myhaccp_di_container() {
  // Store this as a global.
  global $container;
  $container = new Pimple();
  $container['configuration'] = function($c) {
    return new Configuration();
  };
  $container['validator'] = $container->factory(function($c) {
    return new Validator();
  });
  $container['study'] = function($c) {
    return new Study();
  };
  $container['phase'] = $container->factory(function($c) {
    $phase = new Phase();
    return $phase;
  });
  $container['stage'] = $container->factory(function($c) {
    $stage = new Stage();
    $stage->setValidator($c['validator']);
    return $stage;
  });
}

/**
 * Implements hook_menu().
 */
function myhaccp_menu() {
  $items['tool'] = array(
    'title' => 'MyHACCP Web Tool',
    'page callback' => 'myhaccp_list',
    'page arguments' => array(),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('list'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myhaccp_study_resume', 2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/create'] = array(
    'page callback' => 'myhaccp_study_create',
    'access callback' => 'myhaccp_access',
    'access arguments' => array('create'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myhaccp_study_delete', 2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('delete', 2),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%/preview'] = array(
    'page callback' => 'myhaccp_study_preview',
    'title' => 'Preview study',
    'page arguments' => array(2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('view', 2),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%/finish'] = array(
    'page callback' => 'myhaccp_study_finish',
    'page arguments' => array(2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('view', 2),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%/complete/%'] = array(
    'page callback' => 'myhaccp_study_complete',
    'page arguments' => array(2, 4),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('edit', 2),
    'file' => 'mforms/myhaccp.myhaccp.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%/pdf'] = array(
    'page callback' => 'myhaccp_output_pdf',
    'page arguments' => array(2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('view', 2),
    'file' => 'includes/myhaccp.pdf.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['help/%dialog_js/%'] = array(
    'title' => 'Help',
    'page arguments' => array(1, 2),
    'page callback' => 'myhaccp_help_modal',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Define our permissions for managing the forms.
 */
function myhaccp_permission() {
  return array(
    'create myhaccp study' => array(
      'title' => t('Create myhaccp studies'),
      'description' => t('Allow this role to create new myhaccp studies.'),
    ),
    'edit own myhaccp study' => array(
      'title' => t('Edit own myhaccp studies'),
      'description' => t('Edit a user\'s own myhaccp studies.'),
    ),
    'edit any myhaccp study' => array(
      'title' => t('Edit any myhaccp studies'),
      'description' => t('Edit any user\'s myhaccp studies.'),
    ),
    'delete own myhaccp study' => array(
      'title' => t('Delete own myhaccp studies'),
      'description' => t('Delete a user\'s own myhaccp studies.'),
    ),
    'delete any myhaccp study' => array(
      'title' => t('Delete any myhaccp studies'),
      'description' => t('Delete any user\'s myhaccp studies.'),
    ),
    'list own myhaccp study' => array(
      'title' => t('List own myhaccp studies'),
      'description' => t('List a user\'s own myhaccp studies.'),
    ),
    'list any myhaccp study' => array(
      'title' => t('List any myhaccp studies'),
      'description' => t('List any user\'s myhaccp studies.'),
    ),
    'view own myhaccp study' => array(
      'title' => t('View own myhaccp studies'),
      'description' => t('View the output of a user\'s own myhaccp studies.'),
    ),
    'view any myhaccp study' => array(
      'title' => t('View any myhaccp studies'),
      'description' => t('View the output of any user\'s myhaccp studies.'),
    ),
  );
}

/**
 * Menu access callback.
 *
 * @param string $op
 *   Operation to check against.
 * @param bool $iid
 *   The IID to check.
 * @return bool
 *   Boolean determining access.
 */
function myhaccp_access($op, $iid = FALSE) {
  global $user;
  if ($op == 'create') {
    return user_access('create myhaccp study');
  }
  elseif ($op == 'delete') {
    // Is this user the owner?
    if (user_access('delete any myhaccp study')) {
      return TRUE;
    }
    if (user_access('delete own myhaccp study') && $iid && myhaccp_user_owns_study($iid, $user)) {
      return TRUE;
    }
    return user_access('delete any myhaccp study') || user_access('delete own myhaccp study');
  }
  elseif ($op == 'edit') {
    if (user_access('edit any myhaccp study')) {
      return TRUE;
    }
    if (user_access('edit own myhaccp study') && $iid && myhaccp_user_owns_study($iid, $user)) {
      return TRUE;
    }
  }
  elseif ($op == 'view') {
    if (user_access('view any myhaccp study')) {
      return TRUE;
    }
    if (user_access('view own myhaccp study') && $iid && myhaccp_user_owns_study($iid, $user)) {
      return TRUE;
    }
  }
  else {
    // List haccp studies.
    if (user_access('list any myhaccp study') || user_access('list own myhaccp study')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_STORE_KEY_mforms_init().
 */
function myhaccp_myhaccp_mforms_init() {
  $store = MformsDatabaseStore::getInstance('myhaccp');
  $steps = MformsSteps::getInstance($store);

  // If using mustistep controls you need to explicitly define form steps and
  // its attributes.
  $controls = MyHACCPMultiStepControls::getInstance($store, $steps, array(
    'preparatory_intro' => array(
      'stage' => 'preparatory',
      'value' => 'Intro',
      'weight' => 0,
    ),
    'preparatory_a' => array(
      'stage' => 'preparatory',
      'value' => 'A',
      'weight' => 1,
    ),
    'preparatory_b' => array(
      'stage' => 'preparatory',
      'value' => 'B',
      'weight' => 2,
    ),
    'preparatory_c_1' => array(
      'stage' => 'preparatory',
      'value' => 'C.1',
      'weight' => 3,
    ),
    'preparatory_c_2' => array(
      'stage' => 'preparatory',
      'value' => 'C.2',
      'weight' => 4,
    ),
    'preparatory_d' => array(
      'stage' => 'preparatory',
      'value' => 'D',
      'weight' => 5,
    ),
    'preparatory_e' => array(
      'stage' => 'preparatory',
      'value' => 'E',
      'weight' => 6,
    ),
    'preparatory_f' => array(
      'stage' => 'preparatory',
      'value' => 'F',
      'weight' => 7,
    ),
    'preparatory_g' => array(
      'stage' => 'preparatory',
      'value' => 'G',
      'weight' => 8,
    ),
    'preparatory_h' => array(
      'stage' => 'preparatory',
      'value' => 'H',
      'weight' => 9,
    ),
    'preparatory_review' => array(
      'stage' => 'preparatory',
      'value' => 'Review',
      'weight' => 10,
    ),
    'principle_intro' => array(
      'stage' => 'principles',
      'value' => 'Intro',
      'weight' => 11,
    ),
    'principle_1_1' => array(
      'stage' => 'principles',
      'value' => '1.1',
      'weight' => 12,
    ),
    'principle_1_2' => array(
      'stage' => 'principles',
      'value' => '1.2',
      'weight' => 13,
    ),
    'principle_1_3' => array(
      'stage' => 'principles',
      'value' => '1.3',
      'weight' => 14,
    ),
    'principle_2_1' => array(
      'stage' => 'principles',
      'value' => '2.1',
      'weight' => 15,
    ),
    'principle_2_2' => array(
      'stage' => 'principles',
      'value' => '2.2',
      'weight' => 16,
    ),
    'principle_3' => array(
      'stage' => 'principles',
      'value' => '3',
      'weight' => 17,
    ),
    'principle_4' => array(
      'stage' => 'principles',
      'value' => '4',
      'weight' => 18,
    ),
    'principle_5' => array(
      'stage' => 'principles',
      'value' => '5',
      'weight' => 19,
    ),
    'principle_6' => array(
      'stage' => 'principles',
      'value' => '6',
      'weight' => 20,
    ),
    'principle_7' => array(
      'stage' => 'principles',
      'value' => '7',
      'weight' => 21,
    ),
    'principle_review' => array(
      'stage' => 'principles',
      'value' => 'Review',
      'weight' => 22,
    ),
  ));

  // Add the parsley.js library.
  $path = libraries_get_path('parsleyjs');
  drupal_add_js($path . '/parsley.js');
  drupal_add_js($path . '/parsley.extend.js');
  drupal_add_js(drupal_get_path('module', 'myhaccp') . '/mforms/js/parsley_custom.js');
  $path = libraries_get_path('qtip2');
  if ($path) {
    drupal_add_js($path . '/jquery.qtip.js');
    drupal_add_css($path . '/jquery.qtip.min.css');
    drupal_add_js(drupal_get_path('module', 'myhaccp') . '/mforms/js/qtip2_custom.js');
  }

  // Init the mforms.
  mforms_init_module('myhaccp', 'myhaccp', $store, $controls);
}

/**
 * Implements hook_element_info_alter().
 */
function myhaccp_element_info_alter(&$types) {
  foreach ($types as $type => $values) {
    $types[$type]['#process'][] = 'myhaccp_process';
  }
  ctools_include('myhaccp.form', 'myhaccp', 'includes');
  return;
}

/**
 * Menu callback which displays the form.
 *
 * This function is called whenever the form is loaded.
 */
function myhaccp_study_resume($form, &$form_state, $iid = FALSE) {
  // If we've been passed an IID then set the session to that.
  if ($iid && is_numeric($iid)) {
    // Check that this user has permission to look at this form.
    global $user;
    $select = db_select('mforms_storage', 's')
      ->fields('s', array('uid'))
      ->condition('s.iid', $iid);
    $uid = $select->execute()->fetchField();
    if (user_access('edit any myhaccp form') || $user->uid == $uid) {
      $_SESSION['iid'] = $iid;
    }
    else {
      drupal_set_message('You do not have permission to edit this user\'s form', 'error');
      drupal_access_denied();
    }
  }
  else {
    // If there is no current session open then return to the tool.
    drupal_set_message('Please edit an existing form or create a new one.');
    drupal_goto('tool');
  }
  // Return the form.
  // Add the IID to the study object.
  global $container;
  $study = $container['study'];
  $study->setCurrentStudy($iid);
  return mforms_build('myhaccp', 'preparatory_intro', $form_state);
}

/**
 * Initialises a study and all dependencies.
 *
 * Expects that the IID has already been set in the study with $study->setIID().
 */
function myhaccp_initialise_study(&$study) {
  if (class_exists('Pimple')) {
    // Get the DI container.
    global $container;
    // Initialise the two phases.
    $preparatory = $container['phase'];
    $preparatory->setName('preparatory');
    $principles = $container['phase'];
    $principles->setName('principle');
    // Add the phases to the study.
    $study->addPhase($preparatory);
    $study->addPhase($principles);
    // Initialise all the stages and add to the correct phase.
    $configuration = $container['configuration'];
    $urls = $configuration->getStageUrls();
    $titles = $configuration->getStageTitles();
    foreach ($configuration->getMachineNames() as $name => $phase) {
      $stage = $container['stage'];
      // Set the machine name for the stage.
      $stage->setName($name);
      // Set the url for the stage.
      $stage->setUrl($urls[$name]);
      // Set the title for the stage.
      $stage->setTitle($titles[$name]);
      $stage->validator->setStage($stage);
      // Set the IID for the stage and validator.
      $stage->setIID($study->getIID());
      $stage->validator->setIID($study->getIID());
      // Add the stage to the phase.
      $phase = $study->getPhase($phase);
      // Set the phase in of the stage.
      $stage->setPhase($phase);
      $phase->addStage($stage);
    }
  }
}

/**
 * Implements hook_theme().
 */
function myhaccp_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'myhaccp');
  $hooks = array(
    'myhaccp_1_2_table' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhaccp_1_2_table',
    ),
    'myhaccp_1_3_table' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhaccp_1_3_table',
    ),
    'myhaccp_2_2_table' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhaccp_2_2_table',
    ),
    'myhaccp_preview_diagram' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhaccp_preview_diagram',
    ),
  );
  if (class_exists('Configuration')) {
    $configuration = new Configuration();
    $files = $configuration->getPDFSections();
    foreach ($files as $name => $section) {
      // Now the hook. We want to pass in the form_state data so have added the
      // data variable. This will get properly sorted by a preprocess function so
      // the template has the correct data to display.
      $hooks[$name] = array(
        'variables' => array('study' => NULL),
        'file' => $name . ".theme.inc",
        'path' => "$path/mforms/sections/$name",
        'template' => $name
      );
    }
  }
  return $hooks;
}

/**
 * Returns html to display a help tip icon.
 *
 * Currently just a simple bit of html, but this function may expand to
 * to take parameters.
 *
 * @param string $link
 *   The node ID or a string like node/23.
 *
 * @return string
 *   Prepared HTML for the link tip.
 */
function _help_tip($link = '#') {
  $parts = array();
  if (is_numeric($link)) {
    $parts[0] = 'node/' . $link;
  }
  else {
    $parts = explode('#', $link);
  }


  $options = array(
    'attributes' => array(
      'class' => array(
        'help-tip',
      ),
      'title' => 'Link through to further guidance on this subject.',
      'target' => '_blank',
    ),
  );

  if (isset($parts[1])) {
    $options['fragment'] = $parts[1];
  }

  return l(t('?'), $parts[0], $options);
}

/**
 * Validation handler that shows a successful save message.
 *
 * @see myhaccp_form_myhaccp_start_form_alter()
 */
function myhaccp_saved_message($form, &$form_state) {
  if (isset($form_state['clicked_button']) && $form_state['clicked_button']['#value'] == 'Save this page') {
    drupal_set_message('Study saved', 'status', FALSE);
  }
}

/**
 * Callback for the pager buttons.
 */
function myhaccp_pager_submit($form, &$form_state) {
  // Only deal with back submit if we have store key.
  if (isset($form_state['triggering_element']['#store_key'])) {
    // Add $_POST into values as they got unset in the validation process due to
    // limit_validation_errors property of the back/step button.
    $form_state['values'] = array_merge($form_state['values'], $_POST);
    // Get the dependency injection container.
    global $container;
    // Get the current study.
    $study = $container['study'];
    $stage = $study->getStage($form_state['triggering_element']['#mforms_step']);
    $form_state['redirect'] = 'tool/study/' . $study->getIID() . '/' . $stage->url;
    mforms_submit($form_state['clicked_button']['#store_key'], $form, $form_state);
  }
}

/**
 * Callback for save and continue.
 */
function myhaccp_continue_submit($form, &$form_state) {
  // Only deal with back submit if we have store key.
  if (isset($form_state['clicked_button']['#store_key'])) {
    // Add $_POST into values as they got unset in the validation process due to
    // limit_validation_errors property of the back/step button.
    $form_state['values'] += $_POST;
    // Get the dependency injection container.
    global $container;
    // Get the current study.
    $study = $container['study'];
    $stage = $study->getStage($form['next_step']['#value']);
    $form_state['redirect'] = 'tool/study/' . $study->getIID() . '/' . $stage->url;
    mforms_submit($form_state['clicked_button']['#store_key'], $form, $form_state);
  }
}

/**
 * Callback for save and continue.
 */
function myhaccp_back_submit($form, &$form_state) {
  // Only deal with back submit if we have store key.
  if (isset($form_state['clicked_button']['#store_key'])) {
    // Add $_POST into values as they got unset in the validation process due to
    // limit_validation_errors property of the back/step button.
    $form_state['values'] += $_POST;
    // Get the dependency injection container.
    global $container;
    // Get the current study.
    $study = $container['study'];
    $stage = $study->getStage($form['prev_step']['#value']);
    $form_state['redirect'] = 'tool/study/' . $study->getIID() . '/' . $stage->url;
    mforms_submit($form_state['clicked_button']['#store_key'], $form, $form_state);
  }
}

/**
 * Callback for save button.
 */
function myhaccp_save_submit($form, &$form_state) {
  // Only deal with back submit if we have store key.
  if (isset($form_state['clicked_button']['#store_key'])) {
    // Add $_POST into values as they got unset in the validation process due to
    // limit_validation_errors property of the back/step button.
    $form_state['values'] += $_POST;
    $form_state['rebuild'] = TRUE;
    // Get the dependency injection container.
    global $container;
    // Get the current study.
    $study = $container['study'];
    $stage = $study->getStage($form['curr_step']['#value']);
    $form_state['redirect'] = 'tool/study/' . $study->getIID() . '/' . $stage->url;
    mforms_submit($form_state['clicked_button']['#store_key'], $form, $form_state);
  }
}

/**
 * Get an item from an array using "dot" notation.
 *
 * @param array $array
 *   The array to check.
 * @param string $key
 *   The name of the key. Uses dot notation to delimit the keys.
 * @param mixed $default
 *   The default value to return if not found.
 *
 * @return mixed
 *   The value if found or the default if not. If no default then returns the
 *   array.
 */
function array_get($array, $key, $default = NULL) {
  if (is_null($key)) {
    return $array;
  }

  if (isset($array[$key])) {
    return $array[$key];
  }

  foreach (explode('.', $key) as $segment) {
    if (!is_array($array) || !array_key_exists($segment, $array)) {
      return value($default);
    }

    $array = $array[$segment];
  }

  return $array;
}

/**
 * Return the default value of the given value.
 *
 * @param mixed $value
 *   The default to return.
 *
 * @return mixed
 *   The return value.
 */
function value($value) {
  return $value instanceof Closure ? $value() : $value;
}

/**
 * Returns the prepared data from the database or form_state.
 *
 * Also updates the validation values in the form_state from the database.
 *
 * @param array $data
 *   The data as returned by mforms_get_vals().
 * @param array $form_state
 *   The current form_state array. Passed by reference so that the validate
 *   values can be added.
 *
 * @return array
 *   The saved or current values of the fields.
 */
function myhaccp_prepare_values($data, &$form_state) {
  $values = array();
  if (!empty($data)) {
    $values = $data;
    if (isset($data['validate'])) {
      $form_state['values']['validate'] = $data['validate'];
    }
  }
  elseif (isset($form_state['values'])) {
    $values = $form_state['values'];
  }
  return $values;
}

/**
 * The modal dialog for the help pages menu callback.
 *
 * Renders the node and passes it back in a ctools modal.
 *
 * @param bool|string $js
 *   CTools indication of js enabled.
 * @param bool|int $nid
 *   The node ID of the help node to show in the modal.
 *
 * @return string
 *   The contents of the node, that will fill the modal window.
 */
function myhaccp_help_modal($js = FALSE, $nid = FALSE) {
  if (!$nid) {
    // If no nid was provided then just forward to the help/guidance page.
    drupal_goto('help/guidance');
  }
  if ($js) {
    // Load all the help documents.
    global $container;
    $study = $container['study'];
    $help = $container['configuration']->getHelpPages();
    $node_content = '<div class="help-content">';
    // Iterate over the two phases.
    foreach ($study->getPhases() as $phase) {
      // Get all the stages from the phases and loop over them.
      foreach ($phase->getStages() as $stage) {
        // Check there is a help page for this stage.
        if (isset($help[$stage->getName()])) {
          // Load the help node.
          $node = node_load($help[$stage->getName()]);
          if ($node) {
            // If this is the current page's help show an active class on start.
            if ($nid == $node->nid) {
              $class = 'active';
            }
            else {
              $class = 'hidden';
            }
            // Render the node article.
            $article = render(node_view($node, 'full'));
            // Strip the heading.
            $node_content .= str_replace('class="node', 'id="help-' . $node->nid . '" class="' . $class . ' node', $article);
            $node_content .= '</article>';
          }
          $phasename = $phase->getName();
          $item = '<a href="#help-' . $node->nid . '"';
          if ($nid == $node->nid) {
            // Add an active class.
            $item .= ' class="active"';
          }
          $item .= '>' . $node->title . '</a>';
          $menu_items[$phasename][$node->nid] = $item;
        }
      }
    }
    $node_content .= '</div>';

    $menu_prep = $menu_items['preparatory'];
    $menu_principle = $menu_items['principle'];

    $menu_prep = implode('</li><li>', $menu_prep);
    $menu_principle = implode('</li><li>', $menu_principle);

    $menu = '<nav class="help-menu"><h2>Help topics</h2><h3>Preparatory</h3><ul class="phase"><li>' . $menu_prep . '</li></ul>';
    $menu .= '<h3>Principles</h3><ul class="phase"><li>' . $menu_principle . '</li></ul></nav>';

    $contents = $menu . $node_content;
    // Add a footer close button.
    $contents .= '<footer class="dialog-footer"><a href="#close" class="close-button">Close help</a></footer>';

    // Return the modal with node title and rendered contents.
    $commands = array();
    $options = array(
      'title' => '',
      'width' => '85%',
      'position' => array(
        'center',
        'bottom',
      ),
      'show' => 500,
      'hide' => 500,
      'draggable' => FALSE,
    );
    $commands[] = dialog_command_display($contents, $options);
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
    drupal_exit();
  }

  // We don't have js so forward on to the help node.
  drupal_goto('node/' . $nid);
}

/**
 * Prepares an ajax enabled modal link for help text.
 *
 * @param int $nid
 *   The node ID to link to.
 *
 * @return string
 *   The rendered link.
 */
function myhaccp_prepare_more_link($nid) {
  // Add the dialog library.
  drupal_add_library('dialog', 'dialog');
  $node = node_load($nid);
  // Prepare the options.
  $options = array(
    'html' => TRUE,
    'attributes' => array(
      'class' => array(
        'use-ajax',
        'use-dialog',
        'more-link',
      ),
      'title' => 'Link through to further guidance on this subject.',
      'target' => '_blank',
      'data-topic' => $node->title,
    ),
  );
  $destination = 'help/nojs/' . $nid;

  // Return the link.
  return l(t('More information &raquo;'), $destination, $options);
}

/**
 * Iterator function to traverse the fields.
 *
 * @param RecursiveArrayIterator $iterator
 *   An instance of the iterator object.
 * @param object $found
 *   A object (passed by reference by default) that contains an items element
 *   which is used to populate keys of any fields with a value. This is then
 *   used in the calling function to determine whether values have been found.
 */
function myhaccp_find_values($iterator, $found) {
  while ($iterator->valid()) {
    // Check if there are children.
    if ($iterator->hasChildren()) {
      // Call this function again to iterate over the children.
      myhaccp_find_values($iterator->getChildren(), $found);
    }
    else {
      $key = $iterator->key();
      $value = $iterator->current();
      // Check if this value is not empty.
      if (!empty($value)) {
        // Add the key as an item to the found items array to be counted later.
        $found->items[] = $key;
      }
    }
    // Move on to the next element.
    $iterator->next();
  }
}

/**
 * Gets the results of all the stages of the study.
 *
 * @param array $keys
 *   The names of the store keys (stages) to get the data for.
 * @param int $iid
 *   The study ID to preview.
 *
 * @return array
 *   An empty array if the IID wasn't found, otherwise an array keyed with the
 *   stage name and the values being the unserialized form state values.
 */
function myhaccp_study_get_stages_data($keys, $iid) {
  // Get all the stages from the db.
  $query = db_select('mforms_storage_steps', 'mss')
    ->fields('mss', array('store_key', 'store_data'))
    ->condition('mss.store_key', $keys, 'IN')
    ->condition('mss.iid', $iid);
  $results = $query->execute()->fetchAllAssoc('store_key');
  if ($results) {
    // Unpack the data into an array keyed by the stage name.
    asort($results);
    foreach ($results as $stage => $values) {
      $results[$stage] = unserialize($values->store_data);
    }
    // Sort it alphabetically and return it.
    return $results;
  }
  // Return an empty array if the study has not been found.
  return array();
}

/**
 * Gets the label for a stored checkbox key.
 *
 * @param string $stage
 *   The machine name of the stage.
 * @param string $target
 *   The form element to target in the stage in dot notation.
 * @param array $values
 *   The values to match the keys to find the labels.
 *
 * @return array
 *   An empty array if nothing found or an array of labels to display.
 */
function myhaccp_prepare_checkboxes_output($stage, $target, $values) {
  // Prepare the fake values needed to fetch the form.
  $form_state = array();
  $next_stage = '';
  // Fetch the form.
  $form = $stage($form_state, $next_stage);
  // Get the checkbox values.
  $checkbox_values = array_get($values, $target, array());
  // Get the checkbox element.
  $target = $stage . '.' . $target;
  $element = array_get($form, $target, FALSE);
  // Prepare the labels array.
  $labels = array();
  // Bail if no element was found.
  if (!$element) {
    return $labels;
  }
  // Get the options from the element.
  $target = $target . '.#options';
  $options = array_get($form, $target, FALSE);
  // Iterate over the checkboxes values and try to match the key to the label.
  foreach ($checkbox_values as $key => $value) {
    if ($value !== 0) {
      // Get the label.
      if (isset($options[$key])) {
        $labels[] = $options[$key];
      }
    }
  }
  return $labels;
}

/**
 * Implements hook_file_download().
 *
 * @param $uri
 *   The file uri.
 *
 * @return array
 *   The headers for the file.
 */
function myhaccp_file_download($uri) {
  // Get the file record based on the URI. If not in the database just return.
  $files = file_load_multiple(array(), array('uri' => $uri));
  if (count($files)) {
    foreach ($files as $item) {
      // Since some database servers sometimes use a case-insensitive comparison
      // by default, double check that the filename is an exact match.
      if ($item->uri === $uri) {
        $file = $item;
        break;
      }
    }
  }
  if (!isset($file)) {
    return;
  }

  // Access is granted.
  $headers = file_get_content_headers($file);
  return $headers;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function myhaccp_form_user_register_form_alter(&$form, $form_state) {
  $form['profile_main']['#title'] = NULL;
  $form['#validate'][] = 'myhaccp_user_register_form_validate';
  $form['profile_main']['field_business_other'][LANGUAGE_NONE][0]['value']['#states'] = array(
    'visible' => array(
      '#edit-profile-main-field-business-type select' => array(
        'value' => 'other'
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function myhaccp_form_user_profile_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'myhaccp_user_register_form_validate';
  $form['profile_main']['field_business_other'][LANGUAGE_NONE][0]['value']['#states'] = array(
    'visible' => array(
      '#edit-profile-main-field-business-type select' => array(
        'value' => 'other'
      ),
    ),
  );
}

/**
 * Custom validation handler for the registration form.
 */
function myhaccp_user_register_form_validate($form, &$form_state) {
  // Ensure that the country selected is United Kingdom.
  $country = $form_state['values']['profile_main']['field_country'][LANGUAGE_NONE][0]['value'];
  if (!is_null($country) && $country !== 'United Kingdom') {
    form_set_error('profile_main][field_country', 'You must be located inside the United Kingdom to register on this site and use this tool.');
  }
}

/**
 * Given a user and an IID returns a boolean indicating ownership of a study.
 *
 * @param int $iid
 *   The study ID.
 * @param object $user
 *   The user object to check ownership.
 *
 * @return bool
 *   Boolean indicating ownership.
 */
function myhaccp_user_owns_study($iid, $user) {
  $query = db_select('mforms_storage', 'm')
    ->fields('m', array())
    ->condition('m.uid', $user->uid)
    ->condition('m.iid', $iid);
  $result = $query->execute()->fetchAll();
  if ($result) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Alters the password reset form to provide prlp functionality.
 *
 * The password policy module doesn't integrate with prlp module so we're
 * adding it here.
 *
 * @param array $form
 *   The form to modify.
 * @param array $form_state
 *   The form state array.
 */
function myhaccp_form_user_pass_reset_alter(&$form, $form_state) {
  // Avoid fatal errors is password policy module gets uninstalled.
  if (module_exists('password_policy')) {
    // For some reason this runs twice.
    $ran = &drupal_static(__FUNCTION__);
    if (!isset($ran)) {
      // Modify the elements.
      drupal_add_library('system', 'drupal.form');
      drupal_add_js(drupal_get_path('module', 'password_policy') . '/password_policy.js', array(
        'weight' => 20,
      ));
      password_policy_password_element_alter($form['account']['pass'], $form['#user']);
      // Add the new validate and submit handlers.
      $form['#validate'][] = 'password_policy_user_profile_form_validate';
      $form['#submit'][] = 'password_policy_password_submit';
      $ran = TRUE;
    }
  }
}
