<?php

/**
 * Implements hook_init().
 */
function myhaccp_init() {
  // Declare all of the stages (steps) forms.
  $files = _get_all_steps();
  foreach ($files as $file => $type) {
    ctools_include($file, 'myhaccp', "mforms/$type/$file");
  }
  ctools_include('myhaccp.form', 'myhaccp', 'includes');
}

/**
 * Implements hook_menu().
 */
function myhaccp_menu() {
  $items['tool'] = array(
    'title' => 'MyHACCP Web Tool',
    'page callback' => 'myhaccp_list',
    'page arguments' => array(),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('list'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myhaccp_study_resume', 2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('edit'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/create'] = array(
    'page callback' => 'myhaccp_study_create',
    'access callback' => 'myhaccp_access',
    'access arguments' => array('create'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myhaccp_study_delete', 2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('delete'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%/preview'] = array(
    'page callback' => 'myhaccp_study_preview',
    'page arguments' => array(2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('view'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tool/study/%/pdf'] = array(
    'page callback' => 'myhaccp_output_pdf',
    'page arguments' => array(2),
    'access callback' => 'myhaccp_access',
    'access arguments' => array('view'),
    'file' => 'includes/myhaccp.pdf.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['help/%ctools_js/%'] = array(
    'title' => 'Help',
    'page arguments' => array(1, 2),
    'page callback' => 'myhaccp_help_modal',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Define our permissions for managing the forms.
 */
function myhaccp_permission() {
  return array(
    'create myhaccp study' => array(
      'title' => t('Create myhaccp studies'),
      'description' => t('Allow this role to create new myhaccp studies.'),
    ),
    'edit own myhaccp study' => array(
      'title' => t('Edit own myhaccp studies'),
      'description' => t('Edit a user\'s own myhaccp studies.'),
    ),
    'edit any myhaccp study' => array(
      'title' => t('Edit any myhaccp studies'),
      'description' => t('Edit any user\'s myhaccp studies.'),
    ),
    'delete own myhaccp study' => array(
      'title' => t('Delete own myhaccp studies'),
      'description' => t('Delete a user\'s own myhaccp studies.'),
    ),
    'delete any myhaccp study' => array(
      'title' => t('Delete any myhaccp studies'),
      'description' => t('Delete any user\'s myhaccp studies.'),
    ),
    'list own myhaccp study' => array(
      'title' => t('List own myhaccp studies'),
      'description' => t('List a user\'s own myhaccp studies.'),
    ),
    'list any myhaccp study' => array(
      'title' => t('List any myhaccp studies'),
      'description' => t('List any user\'s myhaccp studies.'),
    ),
    'view own myhaccp study' => array(
      'title' => t('View own myhaccp studies'),
      'description' => t('View the output of a user\'s own myhaccp studies.'),
    ),
    'view any myhaccp study' => array(
      'title' => t('View any myhaccp studies'),
      'description' => t('View the output of any user\'s myhaccp studies.'),
    ),
  );
}

/**
 * Menu access callback.
 *
 * @param string $op
 *   Operation to check against.
 *
 * @return bool
 *   Boolean determining access.
 */
function myhaccp_access($op) {
  if ($op == 'create') {
    return user_access('create myhaccp study');
  }
  elseif ($op == 'delete') {
    return user_access('delete any myhaccp study') || user_access('delete own myhaccp study');
  }
  elseif ($op == 'edit') {
    return user_access('edit any myhaccp study') || user_access('edit own myhaccp study');
  }
  elseif ($op == 'view') {
    return user_access('view any myhaccp study') || user_access('view own myhaccp study');
  }
  else {
    // List haccp studies.
    return user_access('list any myhaccp study') || user_access('list own myhaccp study');
  }
}

/**
 * Implements hook_STORE_KEY_mforms_init().
 */
function myhaccp_myhaccp_mforms_init() {
  $store = MformsDatabaseStore::getInstance('myhaccp');
  $steps = MformsSteps::getInstance($store);

  // If using mustistep controls you need to explicitly define form steps and
  // its attributes.
  $controls = MyHACCPMultiStepControls::getInstance($store, $steps, array(
    'preparatory_a' => array(
      'stage' => 'preparatory',
      'value' => 'A',
      'weight' => 1,
    ),
    'preparatory_b' => array(
      'stage' => 'preparatory',
      'value' => 'B',
      'weight' => 2,
    ),
    'preparatory_c_1' => array(
      'stage' => 'preparatory',
      'value' => 'C.1',
      'weight' => 3,
    ),
    'preparatory_c_2' => array(
      'stage' => 'preparatory',
      'value' => 'C.2',
      'weight' => 4,
    ),
    'preparatory_d' => array(
      'stage' => 'preparatory',
      'value' => 'D',
      'weight' => 5,
    ),
    'preparatory_e' => array(
      'stage' => 'preparatory',
      'value' => 'E',
      'weight' => 6,
    ),
    'preparatory_f' => array(
      'stage' => 'preparatory',
      'value' => 'F',
      'weight' => 7,
    ),
    'preparatory_g' => array(
      'stage' => 'preparatory',
      'value' => 'G',
      'weight' => 8,
    ),
    'preparatory_h' => array(
      'stage' => 'preparatory',
      'value' => 'H',
      'weight' => 9,
    ),
    'preparatory_summary' => array(
      'stage' => 'preparatory',
      'value' => 'Summary',
      'weight' => 10,
    ),
    'principle_1_1' => array(
      'stage' => 'principles',
      'value' => '1.1',
      'weight' => 11,
    ),
    'principle_1_2' => array(
      'stage' => 'principles',
      'value' => '1.2',
      'weight' => 12,
    ),
    'principle_1_3' => array(
      'stage' => 'principles',
      'value' => '1.3',
      'weight' => 13,
    ),
    'principle_2_1' => array(
      'stage' => 'principles',
      'value' => '2.1',
      'weight' => 14,
    ),
    'principle_2_2' => array(
      'stage' => 'principles',
      'value' => '2.2',
      'weight' => 15,
    ),
    'principle_3' => array(
      'stage' => 'principles',
      'value' => '3',
      'weight' => 16,
    ),
    'principle_4' => array(
      'stage' => 'principles',
      'value' => '4',
      'weight' => 17,
    ),
    'principle_5' => array(
      'stage' => 'principles',
      'value' => '5',
      'weight' => 18,
    ),
    'principle_6' => array(
      'stage' => 'principles',
      'value' => '6',
      'weight' => 19,
    ),
    'principle_7' => array(
      'stage' => 'principles',
      'value' => '7',
      'weight' => 20,
    ),
  ));

  // Add the parsley.js library.
  $path = libraries_get_path('parsleyjs');
  drupal_add_js($path . '/parsley.js');
  drupal_add_js($path . '/parsley.extend.js');
  drupal_add_js(drupal_get_path('module', 'myhaccp') . '/mforms/js/parsley_custom.js');
  $path = libraries_get_path('qtip2');
  if ($path) {
    drupal_add_js($path . '/jquery.qtip.js');
    drupal_add_css($path . '/jquery.qtip.min.css');
    drupal_add_js(drupal_get_path('module', 'myhaccp') . '/mforms/js/qtip2_custom.js');
  }

  // Init the mforms.
  mforms_init_module('myhaccp', 'myhaccp', $store, $controls);
}

/**
 * Implements hook_element_info_alter().
 */
function myhaccp_element_info_alter(&$types) {
  foreach ($types as $type => $values) {
    $types[$type]['#process'][] = 'myhaccp_process';
  }
  ctools_include('myhaccp.form', 'myhaccp', 'includes');
  return;
}

/**
 * Menu callback which displays the form.
 */
function myhaccp_study_resume($form, &$form_state, $iid = FALSE) {
  // If we've been passed an IID then set the session to that.
  if ($iid && is_numeric($iid)) {
    // Check that this user has permission to look at this form.
    global $user;
    $select = db_select('mforms_storage', 's')
      ->fields('s', array('uid'))
      ->condition('s.iid', $iid);
    $uid = $select->execute()->fetchField();
    if (user_access('edit any myhaccp form') || $user->uid == $uid) {
      $_SESSION['iid'] = $iid;
    }
    else {
      drupal_set_message('You do not have permission to edit this user\'s form', 'error');
      drupal_access_denied();
    }
  }
  else {
    // If there is no current session open then create a new db row.
    drupal_set_message('Please edit an existing form or create a new one.');
    drupal_goto('tool');
  }
  return mforms_build('myhaccp', 'preparatory_a', $form_state);
}

/**
 * Implements hook_theme().
 */
function myhaccp_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'myhaccp');
  $hooks = array(
    'myhaccp_1_2_table' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhaccp_1_2_table',
    ),
    'myhaccp_1_3_table' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhaccp_1_3_table',
    ),
    'myhaccp_2_2_table' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhaccp_2_2_table',
    ),
  );
  $all = _get_all_steps();
  foreach ($all as $stage => $subtype) {
    // Now the hook. We want to pass in the form_state data so have added the
    // data variable. This will get properly sorted by a preprocess function so
    // the template has the correct data to display.
    $hooks[$stage] = array(
      'variables' => array('data' => NULL),
      'file' => "$stage.theme.inc",
      'path' => "$path/mforms/$subtype/$stage",
      'template' => $stage
    );
  }
  return $hooks;
}

/**
 * Returns html to display a help tip icon.
 *
 * Currently just a simple bit of html, but this function may expand to
 * to take parameters.
 *
 * @param string $link
 *   The node ID or a string like node/23.
 *
 * @return string
 *   Prepared HTML for the link tip.
 */
function _help_tip($link = '#') {
  $parts = array();
  if (is_numeric($link)) {
    $parts[0] = 'node/' . $link;
  }
  else {
    $parts = explode('#', $link);
  }

  $options = array(
    'attributes' => array(
      'class' => array(
        'help-tip',
      ),
      'title' => 'Link through to further guidance on this subject.',
      'target' => '_blank',
    ),
  );

  if (isset($parts[1])) {
    $options['fragment'] = $parts[1];
  }

  return l(t('?'), $parts[0], $options);
}

/**
 * Validation handler that shows a successful save message.
 *
 * @see myhaccp_form_myhaccp_start_form_alter()
 */
function myhaccp_saved_message($form, &$form_state) {
  if (isset($form_state['clicked_button']) && $form_state['clicked_button']['#value'] == 'Save this page') {
    drupal_set_message('Study saved', 'status', FALSE);
  }
}

/**
 * Defines all the function names of the stages.
 *
 * @return array
 *   an array keyed by the function name with the value being the preparatory or
 *   principle stage.
 */
function _get_all_steps() {
  $files = array(
    'preparatory_a' => 'preparatory',
    'preparatory_b' => 'preparatory',
    'preparatory_c_1' => 'preparatory',
    'preparatory_c_2' => 'preparatory',
    'preparatory_d' => 'preparatory',
    'preparatory_e' => 'preparatory',
    'preparatory_f' => 'preparatory',
    'preparatory_g' => 'preparatory',
    'preparatory_h' => 'preparatory',
    'preparatory_summary' => 'preparatory',
    'principle_1_1' => 'principle',
    'principle_1_2' => 'principle',
    'principle_1_3' => 'principle',
    'principle_2_1' => 'principle',
    'principle_2_2' => 'principle',
    'principle_3' => 'principle',
    'principle_4' => 'principle',
    'principle_5' => 'principle',
    'principle_6' => 'principle',
    'principle_7' => 'principle',
  );
  return $files;
}

function _get_all_stage_names() {
  return array(
    'preparatory_a' => 'Preparatory Stage A: Prerequisites',
    'preparatory_b' => 'Preparatory Stage B: Management Commitment',
    'preparatory_c_1' => 'Preparatory Stage C: Define scope of the study, <br/>Questions 1-3',
    'preparatory_c_2' => 'Preparatory Stage C: Define scope of the study, <br/>Question 4',
    'preparatory_d' => 'Preparatory Stage D: Select the team',
    'preparatory_e' => 'Preparatory Stage E: Describe the product',
    'preparatory_f' => 'Preparatory Stage F: Identify intended use of the product',
    'preparatory_g' => 'Preparatory Stage G: Construct a flow diagram',
    'preparatory_h' => 'Preparatory Stage H: On-site confirmation of flow diagram',
    'preparatory_summary' => 'Preparatory Summary',
    'principle_1_1' => 'Principle 1, Question 1: Identify and list potential hazards.',
    'principle_1_2' => 'Principle 1, Question 2: Conduct a hazard analysis.',
    'principle_1_3' => 'Principle 1, Question 3: Specify control measures.',
    'principle_2_1' => 'Principle 2, Questions 1-3: Determine Critical Control Points (CCPs)',
    'principle_2_2' => 'Principle 2, Question 4: Specify control measures.',
    'principle_3' => 'Principle 3: Establish Critical Limits',
    'principle_4' => 'Principle 4: Establish a monitoring system for each CCP',
    'principle_5' => 'Principle 5: Establish a corrective action plan',
    'principle_6' => 'Principle 6: Verification',
    'principle_7' => 'Principle 7: Establish documentation and record keeping',
  );
}

/**
 * Gets all the stage functions.
 *
 * @return array
 *   Returns the array keys relating to the step names.
 */
function _get_all_step_names() {
  return array_keys(_get_all_steps());
}

/**
 * Get an item from an array using "dot" notation.
 *
 * @param array $array
 *   The array to check.
 * @param string $key
 *   The name of the key. Uses dot notation to delimit the keys.
 * @param mixed $default
 *   The default value to return if not found.
 *
 * @return mixed
 *   The value if found or the default if not. If no default then returns the
 *   array.
 */
function array_get($array, $key, $default = NULL) {
  if (is_null($key)) {
    return $array;
  }

  if (isset($array[$key])) {
    return $array[$key];
  }

  foreach (explode('.', $key) as $segment) {
    if (!is_array($array) || !array_key_exists($segment, $array)) {
      return value($default);
    }

    $array = $array[$segment];
  }

  return $array;
}

/**
 * Return the default value of the given value.
 *
 * @param mixed $value
 *   The default to return.
 *
 * @return mixed
 *   The return value.
 */
function value($value) {
  return $value instanceof Closure ? $value() : $value;
}

/**
 * Returns the prepared data from the database or form_state.
 *
 * Also updates the validation values in the form_state from the database.
 *
 * @param array $data
 *   The data as returned by mforms_get_vals().
 * @param array $form_state
 *   The current form_state array. Passed by reference so that the validate
 *   values can be added.
 *
 * @return array
 *   The saved or current values of the fields.
 */
function myhaccp_prepare_values($data, &$form_state) {
  $values = array();
  if (!empty($data)) {
    $values = $data;
    if (isset($data['validate'])) {
      $form_state['values']['validate'] = $data['validate'];
    }
  }
  elseif (isset($form_state['values'])) {
    $values = $form_state['values'];
  }
  return $values;
}

/**
 * The modal dialog for the help pages menu callback.
 *
 * Renders the node and passes it back in a ctools modal.
 *
 * @param bool|string $js
 *   CTools indication of js enabled.
 * @param bool|int $nid
 *   The node ID of the help node to show in the modal.
 *
 * @return string
 *   The contents of the node, that will fill the modal window.
 */
function myhaccp_help_modal($js = FALSE, $nid = FALSE) {
  if (!$nid) {
    // If no nid was provided then just forward to the help/guidance page.
    drupal_goto('help/guidance');
  }
  if ($js) {
    // Required includes for ctools to work:
    ctools_include('modal');
    ctools_include('ajax');
    // Load the node object.
    $node = node_load($nid);
    if ($node) {
      // Render the contents.
      $contents = render(node_view($node, 'full'));
      // Return the modal with node title and rendered contents.
      return ctools_modal_render($node->title, $contents);
    }
  }

  // We don't have js so forward on to the help node.
  drupal_goto('node/' . $nid);
}

/**
 * Prepares an ajax enabled modal link for help text.
 *
 * @param int $nid
 *   The node ID to link to.
 *
 * @return string
 *   The rendered link.
 */
function myhaccp_prepare_more_link($nid) {
  // Add the ajax library.
  drupal_add_library('system', 'drupal.ajax');
  // Prepare the options.
  $options = array(
    'html' => TRUE,
    'attributes' => array(
      'class' => array(
        'use-ajax',
        'ctools-modal-myhaccp-style',
        'more-link',
      ),
      'title' => 'Link through to further guidance on this subject.',
      'target' => '_blank',
    ),
  );
  $destination = 'help/nojs/' . $nid;

  // Return the link.
  return l(t('More information &raquo;'), $destination, $options);
}

/**
 * Iterator function to traverse the fields.
 *
 * @param RecursiveArrayIterator $iterator
 *   An instance of the iterator object.
 * @param object $found
 *   A object (passed by reference by default) that contains an items element
 *   which is used to populate keys of any fields with a value. This is then
 *   used in the calling function to determine whether values have been found.
 */
function myhaccp_find_values($iterator, $found) {
  while ($iterator->valid()) {
    // Check if there are children.
    if ($iterator->hasChildren()) {
      // Call this function again to iterate over the children.
      myhaccp_find_values($iterator->getChildren(), $found);
    }
    else {
      $key = $iterator->key();
      $value = $iterator->current();
      // Check if this value is not empty.
      if (!empty($value)) {
        // Add the key as an item to the found items array to be counted later.
        $found->items[] = $key;
      }
    }
    // Move on to the next element.
    $iterator->next();
  }
}

/**
 * Gets the results of all the stages of the study.
 *
 * @param array $keys
 *   The names of the store keys (stages) to get the data for.
 * @param int $iid
 *   The study ID to preview.
 *
 * @return array
 *   An empty array if the IID wasn't found, otherwise an array keyed with the
 *   stage name and the values being the unserialized form state values.
 */
function myhaccp_study_get_stages_data($keys, $iid) {
  // Get all the stages from the db.
  $query = db_select('mforms_storage_steps', 'mss')
    ->fields('mss', array('store_key', 'store_data'))
    ->condition('mss.store_key', $keys, 'IN')
    ->condition('mss.iid', $iid);
  $results = $query->execute()->fetchAllAssoc('store_key');
  if ($results) {
    // Unpack the data into an array keyed by the stage name.
    asort($results);
    foreach ($results as $stage => $values) {
      $results[$stage] = unserialize($values->store_data);
    }
    // Sort it alphabetically and return it.
    return $results;
  }
  // Return an empty array if the study has not been found.
  return array();
}
