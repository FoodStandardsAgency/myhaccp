<?php

/**
 * Implements hook_init().
 */
function myhaccp_init() {
  // Declare all of the step forms.
  $files = _get_all_steps();
  foreach ($files as $file => $dir) {
    ctools_include($file, 'myhaccp', 'mforms/' . $dir);
  }
}

/**
 * Implements hook_menu().
 */
function myhaccp_menu() {
  $items['prototype'] = array(
    'title' => 'My forms',
    'page callback' => 'myhaccp_list',
    'page arguments' => array(),
    'access callback' => 'myhaccp_access',
    'access arguments' => array(1),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['prototype/form'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myhaccp_start_form'),
    'access callback' => 'myhaccp_access',
    'access arguments' => array(1),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['prototype/form/create'] = array(
    'page callback' => 'myhaccp_create',
    'access callback' => 'myhaccp_access',
    'access arguments' => array('create'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Define our permissions for managing the forms.
 */
function myhaccp_permission() {
  return array(
    'create myhaccp forms' => array(
      'title' => t('Create myhaccp forms'),
      'description' => t('Allow this role to create new myhaccp forms.'),
    ),
    'edit own myhaccp forms' => array(
      'title' => t('Edit own myhaccp forms'),
      'description' => t('Edit a user\'s own myhaccp forms.'),
    ),
    'edit any myhaccp forms' => array(
      'title' => t('Edit any myhaccp forms'),
      'description' => t('Edit any user\'s myhaccp forms.'),
    ),
  );
}

/**
 * Menu access callback.
 *
 * @param string $op
 *   Operation to check against.
 *
 * @return bool
 *   Boolean determining access.
 */
function myhaccp_access($op) {
  if ($op == 'create') {
    return user_access('create myhaccp forms');
  }
  else {
    return user_access('edit any myhaccp forms') && user_access('edit own myhaccp forms');
  }
}

/**
 * Implements hook_STORE_KEY_mforms_init().
 */
function myhaccp_myhaccp_mforms_init() {
  $store = MformsDatabaseStore::getInstance('myhaccp');
  $steps = MformsSteps::getInstance($store);

  // If using mustistep controls you need to explicitly define form steps and
  // its attributes.
  $controls = MyHACCPMultiStepControls::getInstance($store, $steps, array(
    'preparatory_a' => array(
      'stage' => 'preparatory',
      'value' => 'A',
      'weight' => 1,
    ),
    'preparatory_b' => array(
      'stage' => 'preparatory',
      'value' => 'B',
      'weight' => 2,
    ),
    'preparatory_c_question_1_3' => array(
      'stage' => 'preparatory',
      'value' => 'C.1',
      'weight' => 3,
    ),
    'preparatory_c_question_4' => array(
      'stage' => 'preparatory',
      'value' => 'C.2',
      'weight' => 4,
    ),
    'preparatory_d' => array(
      'stage' => 'preparatory',
      'value' => 'D',
      'weight' => 5,
    ),
    'preparatory_e' => array(
      'stage' => 'preparatory',
      'value' => 'E',
      'weight' => 6,
    ),
    'preparatory_f' => array(
      'stage' => 'preparatory',
      'value' => 'F',
      'weight' => 7,
    ),
    'preparatory_g' => array(
      'stage' => 'preparatory',
      'value' => 'G',
      'weight' => 8,
    ),
    'preparatory_h' => array(
      'stage' => 'preparatory',
      'value' => 'H',
      'weight' => 9,
    ),
    'principle_1_question_1' => array(
      'stage' => 'principles',
      'value' => '1.1',
      'weight' => 11,
    ),
    'principle_1_question_2' => array(
      'stage' => 'principles',
      'value' => '1.2',
      'weight' => 12,
    ),
    'principle_1_question_3' => array(
      'stage' => 'principles',
      'value' => '1.3',
      'weight' => 13,
    ),
    'principle_2_question_1_3' => array(
      'stage' => 'principles',
      'value' => '2.1',
      'weight' => 14,
    ),
    'principle_2_question_4' => array(
      'stage' => 'principles',
      'value' => '2.2',
      'weight' => 15,
    ),
  ));

//  $controls->ajaxify();

  // Add the parsley.js library.
  $path = libraries_get_path('parsleyjs');
  drupal_add_js($path . '/parsley.js');
  drupal_add_js($path . '/parsley.extend.js');
  drupal_add_js(drupal_get_path('module', 'myhaccp') . '/mforms/js/parsley_custom.js');
  $path = libraries_get_path('qtip2');
  if ($path) {
    drupal_add_js($path . '/jquery.qtip.js');
    drupal_add_css($path . '/jquery.qtip.min.css');
    drupal_add_js(drupal_get_path('module', 'myhaccp') . '/mforms/js/qtip2_custom.js');
  }

  // Init the mforms.
  mforms_init_module('myhaccp', 'myhaccp', $store, $controls);
}

/**
 * Menu callback which displays the form.
 */
function myhaccp_start_form($form, &$form_state, $iid = FALSE) {
  // If we've been passed an IID then set the session to that.
  if ($iid && is_numeric($iid)) {
    // Check that this user has permission to look at this form.
    global $user;
    $select = db_select('mforms_storage', 's')
      ->fields('s', array('uid'))
      ->condition('s.iid', $iid);
    $uid = $select->execute()->fetchField();
    if (user_access('edit any myhaccp form') || $user->uid == $uid) {
      $_SESSION['iid'] = $iid;
    }
    else {
      drupal_set_message('You do not have permission to edit this user\'s form', 'error');
      drupal_access_denied();
    }
  }
  else {
    // If there is no current session open then create a new db row.
    drupal_set_message('Please edit an existing form or create a new one.');
    drupal_goto('prototype');
  }
  return mforms_build('myhaccp', 'preparatory_a', $form_state);
}

/**
 * Implements hook_theme().
 */
function myhaccp_theme() {
  $path = drupal_get_path('module', 'myhaccp') . '/theme';
  return array(
    'myhacpp_p1q2_table' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhacpp_p1q2_table',
    ),
    'myhacpp_p1q3_table' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhacpp_p1q3_table',
    ),
    'myhacpp_p2q4_table' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhacpp_p2q4_table',
    ),
  );
}

/**
 * Returns html to display a help tip icon.
 *
 * Currently just a simple bit of html, but this function may expand to
 * to take parameters.
 *
 * @param string $link
 *   The node ID or a string like node/23.
 *
 * @return string
 *   Prepared HTML for the link tip.
 */
function _help_tip($link = '#') {
  $parts = array();
  if (is_numeric($link)) {
    $parts[0] = 'node/' . $link;
  }
  else {
    $parts = explode('#', $link);
  }

  $options = array(
    'attributes' => array(
      'class' => array(
        'help-tip',
      ),
      'title' => 'Link through to further guidance on this subject.',
      'target' => '_blank',
    ),
  );

  if (isset($parts[1])) {
    $options['fragment'] = $parts[1];
  }

  return l(t('?'), $parts[0], $options);
}

/**
 * Defines all the function names of the stages.
 *
 * @return array
 *   an array keyed by the function name with the value being the preparatory or
 *   principle stage.
 */
function _get_all_steps() {
  $files = array(
    'preparatory_a' => 'preparatory',
    'preparatory_b' => 'preparatory',
    'preparatory_c_question_1_3' => 'preparatory',
    'preparatory_c_question_4' => 'preparatory',
    'preparatory_d' => 'preparatory',
    'preparatory_e' => 'preparatory',
    'preparatory_f' => 'preparatory',
    'preparatory_g' => 'preparatory',
    'preparatory_h' => 'preparatory',
    'principle_1_question_1' => 'principle',
    'principle_1_question_2' => 'principle',
    'principle_1_question_3' => 'principle',
    'principle_2_question_1_3' => 'principle',
    'principle_2_question_4' => 'principle',
  );
  return $files;
}

/**
 * Gets all the stage functions
 * @return array
 */
function _get_all_step_names() {
  return array_keys(_get_all_steps());
}

/**
 * Implements hook_element_info_alter().
 */
function myhaccp_element_info_alter(&$types) {
  foreach ($types as $type => $values) {
    $types[$type]['#process'][] = 'myhaccp_process';
  }
  return;
}

/**
 * Callback: Process form elements to add errors.
 *
 * Checks the form state's storage array element for a validate entry and then
 * tries to match it's key to the current form element's #name attribute. If
 * there is a match then it adds the error class to the form element and also
 * prints a message if the form has been executed. This ensures the message
 * only appears on the current stage.
 *
 * @see myhaccp_element_info_alter()
 */
function myhaccp_process($element, &$form_state) {
  $global_done = &drupal_static(__FUNCTION__);

  // If the input doesn't match the form we're on we're in trouble (browser refresh).
  // Compare [input'] with ['complete form'].
//  if ($global_done == FALSE) {
//    $intersect = array_intersect($form_state['input'], $form_state['complete form']);
//    if (isset($intersect['form_id'])) {
//      unset($intersect['form_id']);
//    }
//    if (empty($intersect)) {
//      // Things are cocked up.
//      $form_state['process_input'] = FALSE;
//    }
//    $global_done = TRUE;
//  }

  // Handle any 'global' validation messages.
  if (isset($form_state['values']['validate'])) {
    if (isset($element['#id']) && $element['#id'] == 'validation-messages') {
      // First check for the special 'global' array element and make sure it
      // hasn't already been completed.
      if (isset($form_state['values']['validate']['global']) && !isset($global_done)) {
        // This means we need to show a message but not highlight any specific
        // form fields. For a message to appear in the validation message div
        // it needs to have both the div in the form and for the div to have
        // the 'data-validation-stage' attribute with a value the same as the
        // key of the message.
        if (is_array($form_state['values']['validate']['global'])) {
          foreach ($form_state['values']['validate']['global'] as $key => $message) {
            if (array_get($element, '#attributes.data-validation-stage', FALSE) == $key) {
              $element['#validation_message'][] = $message;
            }
          }
        }
        $global_done = TRUE;
      }
    }

    // Add the error class to each of the elements.
    foreach ($form_state['values']['validate'] as $name => $message) {
      if (isset($element['#name']) && $element['#name'] == $name) {
        $element['#attributes']['class']['error'] = 'error';
        if (!empty($message) && $form_state['executed'] == TRUE && $element['#type'] !== 'radio') {
          // Add the message inline.
          $element['#validation_message'] = $message;
        }
      }
    }

  }

  return $element;
}

/**
 * Helper to prepare the form_state and $_POST ready to save into the db.
 *
 * Used to prepare validation messages.
 *
 * @param string $target
 *   The form #name parameter to target.
 * @param string $message
 *   The message to display.
 * @param array $form_state
 *   The current form_state array.
 */
function myhacpp_prepare_validation($target, $message, &$form_state) {
  // Convert the dot notation target to name style elements.
  $exploded = explode('.', $target);
  $name = '';
  foreach ($exploded as $key => $element) {
    $name .= $key == 0 ? $element : '[' . $element . ']';
  }
  // Add it to the form_state.
  $form_state['values']['validate'][$name] = $message;
  // Add it to the $_POST to make sure in gets saved in the db.
  $_POST['validate'][$name] = $message;
}

/**
 * Helper to clear validation errors on successful pass.
 *
 * @param array $form_state
 *   The form state array.
 */
function myhaccp_clear_validation(&$form_state) {
  if (isset($form_state['values']['validate'])) {
    unset($form_state['values']['validate']);
  }
  if (isset($_POST['validate'])) {
    unset($_POST['validate']);
  }
}

/**
 * Helper to check whether any options have been chosen in checkboxes fields.
 *
 * @param array $values
 *   The values of form_state to check.
 * @param array $element
 *   The $form element to check.
 *
 * @return bool
 *   TRUE if options are not set.
 */
function _checkboxes_field_is_empty($values, $element) {
  $options = array_get($values, $element, array());
  foreach ($options as $option) {
    if ($option !== 0) {
      $option_check = TRUE;
    }
  }
  if (!isset($option_check)) {
    return TRUE;
  }
  return FALSE;
}

function _checkbox_field_is_empty($values, $element) {
  // Just use the text field function as its the same.
  return _text_field_is_empty($values, $element);
}

/**
 * Helper to check whether any options have been chosen in radios fields.
 *
 * @param array $values
 *   The values of form_state to check.
 * @param array $element
 *   The $form element to check.
 *
 * @return bool
 *   TRUE if options are not set.
 */
function _radios_field_is_empty($values, $element) {
  // Just use the text field function as its the same.
  return _text_field_is_empty($values, $element);
}

/**
 * Checks whether a select field has nothing selected.
 *
 * @param array $values
 *   The values of form_state to check.
 * @param array $element
 *   The $form element to check.
 *
 * @return bool
 *   TRUE if the field is empty.
 */
function _select_field_is_empty($values, $element) {
  $value = array_get($values, $element, 'none');
  if ($value == 'none' || empty($value)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Checks whether a file field has nothing selected.
 *
 * @param array $values
 *   The values of form_state to check.
 * @param array $element
 *   The $form element to check.
 *
 * @return bool
 *   TRUE if the field is empty.
 */
function _file_field_is_empty($values, $element) {
  $value = array_get($values, $element, FALSE);
  if ($value == 0 || empty($value)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Checks whether the given element is empty of value.
 *
 * @param array $values
 *   The values of form_state to check.
 * @param array $element
 *   The $form element to check.
 *
 * @return bool
 *   TRUE if the field is empty.
 */
function _text_field_is_empty($values, $element) {
  $value = array_get($values, $element, FALSE);
  if ($value) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Get an item from an array using "dot" notation.
 *
 * @param array $array
 *   The array to check.
 * @param string $key
 *   The name of the key. Uses dot notation to delimit the keys.
 * @param mixed $default
 *   The default value to return if not found.
 *
 * @return mixed
 *   The value if found or the default if not. If no default then returns the
 *   array.
 */
function array_get($array, $key, $default = NULL) {
  if (is_null($key)) {
    return $array;
  }

  if (isset($array[$key])) {
    return $array[$key];
  }

  foreach (explode('.', $key) as $segment) {
    if (!is_array($array) || !array_key_exists($segment, $array)) {
      return value($default);
    }

    $array = $array[$segment];
  }

  return $array;
}

/**
 * Return the default value of the given value.
 *
 * @param mixed $value
 *   The default to return.
 *
 * @return mixed
 *   The return value.
 */
function value($value) {
  return $value instanceof Closure ? $value() : $value;
}

/**
 * Returns the prepared data from the database or form_state.
 *
 * Also updates the validation values in the form_state from the database.
 *
 * @param array $data
 *   The data as returned by mforms_get_vals().
 * @param array $form_state
 *   The current form_state array. Passed by reference so that the validate
 *   values can be added.
 *
 * @return array
 *   The saved or current values of the fields.
 */
function myhaccp_prepare_values($data, &$form_state) {
  $values = array();
  if (!empty($data)) {
    $values = $data;
    if (isset($data['validate'])) {
      $form_state['values']['validate'] = $data['validate'];
    }
  }
  elseif (isset($form_state['values'])) {
    $values = $form_state['values'];
  }
  return $values;
}

/**
 * Callback to check validation for a field.
 *
 * @param string $callback
 *   Validation callback function name.
 * @param string $target
 *   Dot notation string relating to the depth of the array element to target.
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The form state containing the values.
 * @param bool $check_only
 *   Whether to only perform a check and not prepare validation of the form.
 *
 * @return bool
 *   Boolean determining whether the form has failed validation.
 */
function _check_validation($callback, $target, $form, $form_state, $check_only = FALSE) {
  $invalid = $callback($form_state['values'], $target);
  // Its possible we only want to check a field and return the invalid boolean,
  // in which case ignore the next part.
  if ($check_only == FALSE && $invalid) {
    $message = array_get($form, $target . '.#attributes.data-parsley-error-message', NULL);
    myhacpp_prepare_validation($target, $message, $form_state);
  }
  return $invalid;
}

/**
 * Validation handler that shows a successful save message.
 *
 * @see myhaccp_form_myhaccp_start_form_alter()
 */
function myhaccp_saved_message($form, &$form_state) {
  if (isset($form_state['clicked_button']) && $form_state['clicked_button']['#value'] == 'Save') {
    drupal_set_message('Form saved', 'status', FALSE);
  }
}
