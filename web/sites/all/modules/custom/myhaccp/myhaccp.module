<?php

/*                ,
                 / \,,_  .'|
              ,{{| /}}}}/_.'
             }}}}` '{{'  '.
           {{{{{    _   ;, \
        ,}}}}}}    /o`\  ` ;)
       {{{{{{   /           (
       }}}}}}   |            \
      {{{{{{{{   \            \
      }}}}}}}}}   '.__      _  |
      {{{{{{{{       /`._  (_\ /
       }}}}}}'      |    \\___/
       `{{{{`       |     '--'
        }}}`*/

/**
 * Implements hook_init().
 */
function myhaccp_init() {
  // Declare all of the step forms.
  $files = _get_all_steps();
  foreach ($files as $file => $dir) {
    ctools_include($file, 'myhaccp', 'mforms/' . $dir);
  }
}

/**
 * Implements hook_menu().
 */
function myhaccp_menu() {
  $items['prototype'] = array(
    'title' => 'My forms',
    'page callback' => 'myhaccp_list',
    'page arguments' => array(),
    'access callback' => 'myhaccp_access',
    'access arguments' => array(1),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['prototype/form'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myhaccp_start_form'),
    'access callback' => 'myhaccp_access',
    'access arguments' => array(1),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['prototype/form/create'] = array(
    'page callback' => 'myhaccp_create',
    'access callback' => 'myhaccp_access',
    'access arguments' => array('create'),
    'file' => 'myhaccp.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Define our permissions for managing the forms.
 */
function myhaccp_permission() {
  return array(
    'create myhaccp forms' => array(
      'title' => t('Create myhaccp forms'),
      'description' => t('Allow this role to create new myhaccp forms.'),
    ),
    'edit own myhaccp forms' => array(
      'title' => t('Edit own myhaccp forms'),
      'description' => t('Edit a user\'s own myhaccp forms.'),
    ),
    'edit any myhaccp forms' => array(
      'title' => t('Edit any myhaccp forms'),
      'description' => t('Edit any user\'s myhaccp forms.'),
    ),
  );
}

/**
 * Menu access callback.
 *
 * @param string $op
 *   Operation to check against.
 *
 * @return bool
 *   Boolean determining access.
 */
function myhaccp_access($op) {
  if ($op == 'create') {
    return user_access('create myhaccp forms');
  }
  else {
    return user_access('edit any myhaccp forms') && user_access('edit own myhaccp forms');
  }
}

/**
 * Implements hook_STORE_KEY_mforms_init().
 */
function myhaccp_myhaccp_mforms_init() {
  $store = MformsDatabaseStore::getInstance('myhaccp');
  $steps = MformsSteps::getInstance($store);

  // If using mustistep controls you need to explicitly define form steps and
  // its attributes.
  $controls = MyHACCPMultiStepControls::getInstance($store, $steps, array(
    'preparatory_a' => array(
      'stage' => 'preparatory',
      'value' => 'A',
      'weight' => 1,
    ),
    'principle_1_question_1' => array(
      'stage' => 'principles',
      'value' => '1.1',
      'weight' => 11,
    ),
    'principle_1_question_2' => array(
      'stage' => 'principles',
      'value' => '1.2',
      'weight' => 12,
    ),
  ));

  // Init the mforms.
  mforms_init_module('myhaccp', 'myhaccp', $store, $controls);
}

/**
 * Menu callback which displays the form.
 */
function myhaccp_start_form($form, &$form_state, $iid = FALSE) {
  // If we've been passed an IID then set the session to that.
  if ($iid && is_numeric($iid)) {
    // Check that this user has permission to look at this form.
    global $user;
    $select = db_select('mforms_storage', 's')
      ->fields('s', array('uid'))
      ->condition('s.iid', $iid);
    $uid = $select->execute()->fetchField();
    if (user_access('edit any myhaccp form') || $user->uid == $uid) {
      $_SESSION['iid'] = $iid;
    }
    else {
      drupal_set_message('You do not have permission to edit this user\'s form', 'error');
      drupal_access_denied();
    }
  }
  else {
    // If there is no current session open then create a new db row.
    drupal_set_message('Please edit an existing form or create a new one.');
    drupal_goto('prototype');
  }
  return mforms_build('myhaccp', 'preparatory_a', $form_state);
}

/**
 * Implements hook_theme().
 */
function myhaccp_theme() {
  $path = drupal_get_path('module', 'myhaccp') . '/theme';
  return array(
    'myhacpp_p1q2_table' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'myhaccp.theme.inc',
      'function' => 'theme_myhacpp_p1q2_table',
    )
  );
}

/**
 * Returns html to display a help tip icon.
 *
 * Currently just a simple bit of html, but this function may expand to
 * to take parameters.
 */
function _help_tip() {
  return '<a href="/node/2" class="help-tip" title="This link will afford popup help text when clicked." target="_blank">?</a>';
}

/**
 * Defines all the function names of the stages.
 *
 * @return array
 *   an array keyed by the function name with the value being the preparatory or
 *   principle stage.
 */
function _get_all_steps() {
  $files = array(
    'preparatory_a' => 'preparatory',
    'principle_1_question_1' => 'principle',
    'principle_1_question_2' => 'principle',
  );
  return $files;
}

/**
 * Gets all the stage functions
 * @return array
 */
function _get_all_step_names() {
  return array_keys(_get_all_steps());
}
