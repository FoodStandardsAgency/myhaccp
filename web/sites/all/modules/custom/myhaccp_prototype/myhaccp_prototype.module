<?php

/**
 * Implements hook_menu().
 */
function myhaccp_prototype_menu() {
  $items['prototype'] = array(
    'title' => 'My forms',
    'page callback' => 'myhaccp_prototype_list',
    'page arguments' => array(),
    'access callback' => 'myhaccp_prototype_access',
    'access arguments' => array(1),
    'file' => 'myhaccp_prototype.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['prototype/form'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myhaccp_prototype_form'),
    'access callback' => 'myhaccp_prototype_access',
    'access arguments' => array(1),
    'file' => 'myhaccp_prototype.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['prototype/form/create'] = array(
    'page callback' => 'myhaccp_prototype_create',
    'access callback' => 'myhaccp_prototype_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Define our permissions for managing the forms.
 */
function myhaccp_prototype_permission() {
  return array(
    'create myhaccp forms' => array(
      'title' => t('Create myhaccp forms'),
      'description' => t('Allow this role to create new myhaccp forms.'),
    ),
    'edit own myhaccp forms' => array(
      'title' => t('Edit own myhaccp forms'),
      'description' => t('Edit a user\'s own myhaccp forms.'),
    ),
    'edit any myhaccp forms' => array(
      'title' => t('Edit any myhaccp forms'),
      'description' => t('Edit any user\'s myhaccp forms.'),
    ),
  );
}

/**
 * Menu access callback.
 *
 * @param string $op
 *   Operation to check against.
 *
 * @return bool
 *   Boolean determining access.
 */
function myhaccp_prototype_access($op) {
  if ($op == 'create') {
    return user_access('create myhaccp forms');
  }
  else {
    return user_access('edit any myhaccp forms') && user_access('edit own myhaccp forms');
  }
}

/**
 * Implements hook_STORE_KEY_mforms_init().
 */
function myhaccp_prototype_myhaccp_mforms_init() {
  $store = MformsDatabaseStore::getInstance('myhaccp');
  $steps = MformsSteps::getInstance($store);

  // If using mustistep controls you need to explicitly define form steps and
  // its attributes.
  $controls = MformsMultiStepControls::getInstance($store, $steps, array(
    'myhaccp_prototype_form_step_1' => array('value' => 'Step 1', 'weight' => -103),
    'myhaccp_prototype_form_step_2' => array('value' => 'Step 2', 'weight' => -102),
  ));

  // Init the mforms.
  mforms_init_module('myhaccp_prototype', 'myhaccp', $store, $controls);
}

/**
 * Menu callback which displays the form.
 */
function myhaccp_prototype_form($form, &$form_state, $iid = FALSE) {
  // If we've been passed an IID then set the session to that.
  if ($iid && is_numeric($iid)) {
    // Check that this user has permission to look at this form.
    global $user;
    $select = db_select('mforms_storage', 's')
      ->fields('s', array('uid'))
      ->condition('s.iid', $iid);
    $uid = $select->execute()->fetchField();
    if (user_access('edit any myhaccp form') || $user->uid == $uid) {
      $_SESSION['iid'] = $iid;
    }
    else {
      drupal_set_message('You do not have permission to edit this user\'s form', 'error');
      drupal_access_denied();
    }
  }
  else {
    // If there is no current session open then create a new db row.
    drupal_set_message('Please edit an existing form or create a new one.');
    drupal_goto('prototype');
  }
  return mforms_build('myhaccp', 'myhaccp_prototype_form_step_1', $form_state);
}
